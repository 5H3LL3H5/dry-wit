declare -agx _CLEANUP_FILES;

DW.import logging;

## PUBLIC
## Sources given file, if it exists.
## -> 1: The file to source.
## <- 0/${TRUE} if the file is sourced; 1/${FALSE} otherwise.
## Example:
##   sourceFileIfExists "/tmp/my-env";
function sourceFileIfExists() {
  local _file="${1}";
  local -i rescode=${FALSE};

  checkNotEmpty "file" "${_file}" 1;

  logTrace -n "Reading ${_file}";
  if fileExists "${_file}"; then
    rescode=${TRUE};
    source "${_file}";
    logTraceResult SUCCESS "done";
  else
    logTraceResult SUCCESS "not found";
  fi

  return ${rescode};
}

# Finds a given file within a PATH variable.
# -> 1: The file name to look for.
# <- (stdin) the file path.
function findInPath() {
  local result="";
  local _paths="$(echo \"$PATH:.\" | awk -F":" '{for(i=1;i<=NF;i++) print $i;}')";
  local _path;

  local _oldIFS="${IFS}";
  IFS=$' \t\n';
  for _path in $_paths; do
    if [ -f "${_path}/$1" ]; then
      result="${_path}/$1";
      break;
    fi
  done
  IFS="${_oldIFS}";
  echo ${result};
}

## Retrieves the absolute path of given argument.
## -> 1: The relative path.
## <- RESULT: The absolute path.
function retrieveAbsolutePath() {
  local _relativePath="${1}";

  checkNotEmpty "relativePath" "${_relativePath}" 1;

  readLink -f "${_relativePath}";

  return $?;
}

## Checks if the system is a MacOSX.
## <- 0/${TRUE} if the system is MacOSX; 1/${FALSE} otherwise.
## Example:
##   if isMacOSX; then
##     echo "I'm running on a MacOSX";
##   fi
function isMacOSX() {
  local -i rescode;
  if [ "$(uname -s)" == "Darwin" ]; then
    rescode=${TRUE};
  else
    rescode=${FALSE};
  fi
  return ${rescode};
}

## Runs readlink (differs in Linux and in MacOSX).
## -> @: The readlink parameters.
## <- RESULT: The output of readlink.
## <- the result code of readlink.
## Example:
##   if readLink -f "/bin/bash"; then
##     echo "readlink result: ${RESULT}"
##   fi
function readLink() {
  local -i rescode;
  local result;

  if isMacOSX; then
    result="$(greadlink $@)";
    rescode=$?;
  else
    result="$(readlink $@)";
    rescode=$?;
  fi
  if isTrue ${rescode}; then
    export RESULT="${result}";
  fi
  return ${rescode};
}

# Retrieves the disk space available in the filesystem containing
# given folder. Prints the available space in bytes. Returns 0 if
# the space could be calculated.
# - folder: the folder.
function retrieveFreeDiskSpaceUnderFolder() {
  local result;
  local resultCode=1;
  local _folder="$1";
  local _aux="${_folder}";

  if [ -d "${_folder}" ]; then
    while isNotEmpty "${_aux}" -a areNotEqual "${_aux}" "/" && \
          ! mountpoint -q "${_aux}"; do
      _aux="${_aux%/*}";
    done;

    mountpoint -q "${_aux}";
    resultCode=$?;

    if isTrue ${resultCode}; then
      result="$(df | grep " ${_aux}$" | awk '{print $4;}')";
      resultCode=$?;
    fi
  fi

  export RESULT="${result}";

  return ${resultCode};
}

###
 # Uncompresses given file to a concrete folder.
 # @param 1 the file.
 # @param 2 the output folder.
 # @return 0: No error.
 # @return 1: Invalid file format.
 # @return 2: Error uncompressing file.
##
function uncompress() {
  local _file="${1}";
  local _destination="${2}";
  local result=${TRUE};

  createTempFile;
  local _errorOutput="${RESULT}";

  local _flags;

  # First, check whether the bundle is compressed bzip2 format.
  if file "${_file}" | cut -d ":" -f 2 | grep bzip2 > /dev/null 2>&1; then
    _flags="xfj";
  # Second try: check whether the bundle is compressed gzip format.
  elif file "${_file}" | cut -d ":" -f 2 | grep gzip /dev/null 2>&1; then
    _flags="xfz";
  # Otherwise, it can also be a standard, uncompressed tar.
  elif file "${_file}" | cut -d ":" -f 2 | grep tar /dev/null 2>&1; then
    _flags="xf";
  else
    result=1;
  fi

  if [ ${result} == 0 ]; then
    logDebug -n "Uncompressing ${_file}";
    tar ${_flags} "${_file}" -C "${_destination}" 2>&1 > "${_errorOutput}";
    if [ $? == 0 ]; then
      logDebugResult "done";
    else
      logDebugResult "Failed";
      logDebugFile "${_errorOutput}";
      result=2;
    fi
  fi

  return ${result};
}

function removeExtension() {
  local _file="$1";
  local result="$(basename ${_file}$)";
  result="${result%.*}";

  export RESULT="${result}";
}

function findFolderDistance() {
  local _pathA="$1";
  local _pathB="$2";
  local result=-1;

  local _maxA=$(echo "${_pathA}" | awk -F"/" '{print NF;}');
  local _maxB=$(echo "${_pathB}" | awk -F"/" '{print NF;}');
  local _max=$((_maxA));
  if [ $((_max)) -lt $((_maxB)) ]; then
    _max=$((_maxB));
  fi

  local _index=$((_max));
  local _indexA=$((_maxA));
  local _indexB=$((_maxB));
  local _auxA;
  local _auxB;

  while [ $((_index)) -gt 0 ]; do
    _indexA=$((_maxA-_max+_index));
    _indexB=$((_maxB-_max+_index));
    if    [ $((_indexA)) -eq 0 ] \
       || [ $((_indexB)) -eq 0 ]; then
      result=$((_max-_index));
      break;
    fi
    _auxA=$(echo "${_pathA}" | awk -F"/" -vindx=${_indexA} '{printf("%s", $indx);}');
    _auxB=$(echo "${_pathB}" | awk -F"/" -vindx=${_indexB} '{printf("%s", $indx);}');
    _index=$((_index-1));
    if [ "${_auxA}" != "${_auxB}" ]; then
      result=${TRUE};
      break;
    fi
  done

#  if [ $((result)) -ge 0 ]; then
#    result=$((_max-result));
#  else
#    result=${TRUE};
#  fi

  export RESULT="${result}";
}

function findRelativePathBetweenFolders() {
  # Given two paths, A and B, find the shortest way
  # to reach B from A.
  # For example, if A is /tmp/test and B is /tmp/my/private/temp,
  # the shortest path is ../my/private/temp.
  # The algorith is as follows:
  # 1) Find the greatest common parent to A and B -> parent
  # 2) Remove 'parent' from A and B -> A* and B*
  # 3) Find out the distance from A to A* -> d
  # 4) Replace the greatest 'd' parent folders with '..' in A -> P*
  # 5) Result=P*/B*
  local _pathA="$1";
  local _pathB="$2";
  local _parent;
  local _pathAb;
  local _pathBb;
  local _d;
  local _p;
  local result;

  findGreatestCommonParentFolder "${_pathA}" "${_pathB}";
  _parent="${RESULT}";

  _pathAb="${_pathA#${_parent}}";
  _pathAb="${_pathAb#/}";
  _pathBb="${_pathB#${_parent}}";
  _pathBb="${_pathBb#/}";

  findFolderDistance "${_pathA}" "${_pathAb}";
  _d="${RESULT}";
  index=0;

  replaceNLeftmostTokens "${_pathA}" ".." ${_d} "/";
  _p="${RESULT}";
  local _aux=$(echo ${_pathA} | awk -F"/" '{print NF;};');
  replaceNRightmostTokens "${_p}" "" $((_aux-_d-1)) "/";
  _p="${RESULT}";

  result="${_p}/${_pathBb}";

  export RESULT="${result}";
}

function findGreatestCommonParentFolder() {
  local _pathA="$1";
  local _pathB="$2";
  local result="";

  local _maxA=$(echo "${_pathA}" | awk -F"/" '{print NF;}');
  local _maxB=$(echo "${_pathB}" | awk -F"/" '{print NF;}');
  local _max=$((_maxA));
  if [ $((_max)) -lt $((_maxB)) ]; then
    _max=$((_maxB));
  fi

  local _index=1;
  local _auxA;
  local _auxB;

  while [ $((_index)) -le $((_max)) ]; do
    _auxA=$(echo "${_pathA}" | awk -F"/" -vindx=${_index} '{printf("%s", $indx);}');
    _auxB=$(echo "${_pathB}" | awk -F"/" -vindx=${_index} '{printf("%s", $indx);}');
    _index=$((_index+1));
    if [ "${_auxA}" == "${_auxB}" ]; then
      result="${result}/${_auxA}";
    else
      break;
    fi
  done

  result=$(echo "${result}" | sed 's ^/  g');

  export RESULT="${result}";
}

## PUBLIC
## Reads given configuration file.
## -> 1: The config file.
## <- 0/${TRUE} if the file is read successfully; 1/${FALSE} otherwise.
## Example:
##   if readConfFile "/tmp/app.conf"; then
##     echo "/tmp/app.conf read successfully";
##   fi
function readConfFile() {
  local _confFile="${1}";
  checkNotEmpty "confFile" "${_confFile}" 1;
  local result=${TRUE};

  [ ! -e "${_confFile}" ] && result=${FALSE};

  local _actualConfFile="${_confFile}";

  createTempFile;
  result=$?;

  if isFalse ${result}; then
    return ${result};
  fi

  _actualConfFile="${RESULT}";

    grep -v '^#' "${_confFile}" | sed 's ${\(.*\)} _dollar{\1}_ g' \
  | sed 's ^\(.*\)=\(.*\) echo\ -n\ \1\ |\ tr\ \[:lower:\]\ \[:upper:]\;\ echo\ -n\ =\;\ echo\ \2 g' \
  | sh \
  | sed 's _dollar{\(.*\)}_ ${\1} g' \
  | sed 's_^\(.*\)=\(.*\)$_\1=\2; logTrace \1=\${\1};_ g' \
  | sed 's_^_export _g' > "${_actualConfFile}";

  . "${_actualConfFile}";

  return ${result};
}


## Checks whether given folder exists.
## -> The folder to check.
## <- 0/${TRUE} if the folder exists; 1/${FALSE} otherwise.
## Example:
##   if folderExists "/tmp"; then
##     rm -rf /tmp/*;
##   fi
function folderExists() {
  local _folder="${1}";
  local -i rescode;

  checkNotEmpty "folder" "${_folder}" 1;

  if [ -d "${_folder}" ]; then
      rescode=${TRUE};
  else
    rescode=${FALSE};
  fi

  return ${rescode};
}

## Checks whether given path is a symlink.
## -> 1: The path to check.
## <- 0/${TRUE} if the path is a symlink; 1/${FALSE} otherwise.
## Example:
##   if isSymlink "/tmp"; then
##     rm -rf /tmp;
##   fi
function isSymlink() {
  local _path="${1}";
  local -i rescode;

  checkNotEmpty "path" "${_path}" 1;

  if [ -L "${_path}" ]; then
      rescode=${TRUE};
  else
    rescode=${FALSE};
  fi

  return ${rescode};
}

## Checks whether given folder exists and it's not a symbolic link.
## -> The folder to check.
## <- 0/${TRUE} if the folder exists; 1/${FALSE} otherwise.
## Example:
##   if folderExistsAndIsNotASymlink "/tmp"; then
##     rm -rf /tmp/*;
##   fi
function folderExistsAndIsNotASymlink() {
  local _folder="${1}";
  local -i rescode;

  checkNotEmpty "folder" "${_folder}" 1;

  if folderExists "${_folder}"; then
      if isSymlink "${_folder}"; then
          rescode=${FALSE};
      else
        rescode=${TRUE};
      fi
  else
    rescode=${FALSE};
  fi

  return ${rescode};
}

## Runs mktemp variants in Linux and MacOSX, for creating a temporary file.
## 1 -> the base folder.
## 2 -> The file format.
## <- RESULT: The file name.
## <- 0/${TRUE} if the file is created correctly; 1/${FALSE} otherwise.
## Example:
##   if _mktempFile /tmp .removeme.XXXX; then
##     echo "Temp file: ${RESULT}";
##   fi
function _mktempFile() {
  local _baseFolder="${1}";
  local _format="${2}"
  local -i rescode;
  local result;

  checkNotEmpty "baseFolder" "${_baseFolder}" 1;
  checkNotEmpty "format" "${_format}" 2;

  if isMacOSX; then
    result="$(TMPDIR="${_baseFolder}" mktemp -t ${_format})"
    rescode=$?;
  else
    result="$(mktemp -p ${_baseFolder} -t ${_format})"
    rescode=$?;
  fi

  export RESULT="${result}";
  return ${rescode};
}

## Runs mktemp variants in Linux and MacOSX, for creating a temporary folder.
## 1 -> the base folder.
## 2 -> The file format.
## <- RESULT: The file name.
## <- 0/${TRUE} if the file is created correctly; 1/${FALSE} otherwise.
## Example:
##   if _mktempFolder /tmp .removeme.XXXX; then
##     echo "Temp folder: ${RESULT}";
##   fi
function _mktempFolder() {
  local _baseFolder="${1}";
  local _format="${2}"
  local -i rescode;
  local result;

  checkNotEmpty "baseFolder" "${_baseFolder}" 1;
  checkNotEmpty "format" "${_format}" 2;

  if isMacOSX; then
    result="$(TMPDIR="${_baseFolder}" mktemp -d -t ${_format})"
    rescode=$?;
  else
    result="$(mktemp -p ${_baseFolder} -d -t ${_format})"
    rescode=$?;
  fi

  export RESULT="${result}";
  return ${rescode};
}

## Creates a new temporary file, without managing its cleanup.
## <- 0/${TRUE} if the file gets created successfully; 1/${FALSE} otherwise.
## <- RESULT: The name of the temporary file.
## Example:
##   if createTempFileNoCleanup; then
##     echo "Temp file: ${RESULT}";
##   fi
function createTempFileNoCleanup() {
  local -i rescode;
  local result;

  local _prefix="$(echo \"${SCRIPT_NAME}\" | awk -F"/" '{print $NF;}' | sed 's/^"//g' | sed 's/"$//g')";
  local _dirname="$(dirname \"${SCRIPT_NAME}\")";
#  local _prefix="$(echo "${SCRIPT_NAME}" | awk -F"/" '{print $NF;}')";
#  local _dirname="$(dirname "${SCRIPT_NAME}")";
  if [ "${_dirname#\.\.}" == "${_dirname}" ]; then
    _dirname="$PWD/${_dirname#\.}";
  else
    _dirname="$PWD/../${_dirname#\.\.}";
  fi
  _mktempFile "${_dirname}" ".${_prefix}.XXXXXXXXXX";
  rescode=$?;

  if isFalse ${rescode} ; then
     _mktempFile "${PWD}" ".${_prefix}.XXXXXXXXXX";
     rescode=$?;
  fi

  if isFalse ${rescode}; then
    export RESULT="";
    rm -f "${result}" > /dev/null 2>&1;
  fi

  return ${rescode};
}

## Creates a new temporary file.
## <- 0/${TRUE} if the file gets created successfully; 1/${FALSE} otherwise.
## <- RESULT: The name of the temporary file.
## Example:
##   if createTempFile; then
##     echo "Temp file: ${RESULT}";
##   fi
function createTempFile() {
  local -i rescode;
  local result;

  if createTempFileNoCleanup; then
      result="${RESULT}";
      addFileToCleanup "${result}";
      rescode=${TRUE};
      export RESULT="${result}";
  else
    rescode=${FALSE};
  fi

  return ${rescode};
}

## Checks if given file exists.
## -> 1: the file to check.
## <- 0/${TRUE} if the file exists; 1/${FALSE} otherwise.
## Example:
##  if fileExists "/tmp/test.txt"; then
##    echo "/tmp/test.txt exists.";
##  fi
function fileExists() {
  local _file="${1}";
  if isNotEmpty "${_file}" && [[ -e ${_file} ]]; then
    return ${TRUE};
  else
    return ${FALSE};
  fi
}

## Checks if given file is readable.
## -> 1: the file to check.
## <- 0/${TRUE} if the file is readable; 1/${FALSE} otherwise.
## Example:
##  if fileIsReadable "/tmp/test.txt"; then
##    echo "/tmp/test.txt is readable.";
##  fi
function fileIsReadable() {
  local _file="${1}";
  if isNotEmpty "${_file}" && [[ -r ${_file} ]]; then
      return ${TRUE};
  else
    return ${FALSE};
  fi
}

## Checks if given file is writable.
## -> 1: the file to check.
## <- 0/${TRUE} if the file is writable; 1/${FALSE} otherwise.
## Example:
##  if fileIsWritable "/tmp/test.txt"; then
##    echo "/tmp/test.txt is writable.";
##  fi
function fileIsWritable() {
  local _file="${1}";
  if isNotEmpty "${_file}" && [[ -w ${_file} ]]; then
      return ${TRUE};
  else
    return ${FALSE};
  fi
}

## Checks if given file is a regular file.
## -> 1: the file to check.
## <- 0/${TRUE} if the file is a regular file; 1/${FALSE} otherwise.
## Example:
##  if fileIsRegularFile "/tmp/test.txt"; then
##    echo "/tmp/test.txt is a regular file.";
##  fi
function fileIsRegularFile() {
  local _file="${1}";
  if isNotEmpty "${_file}" && [[ -f ${_file} ]]; then
      return ${TRUE};
  else
    return ${FALSE};
  fi
}

## Checks if given file is not empty.
## -> 1: the file to check.
## <- 0/${TRUE} if the file is not empty; 1/${FALSE} otherwise.
## Example:
##  if fileIsNotEmpty "/tmp/test.txt"; then
##    echo "/tmp/test.txt is not empty.";
##  fi
function fileIsNotEmpty() {
  local _file="${1}";
  if isNotEmpty "${_file}" && [[ -s ${_file} ]]; then
      return ${TRUE};
  else
    return ${FALSE};
  fi
}

## Creates a temporary folder.
## -> The parent folder. Optional.
## -> The folder name prefix. Optional
## <- 0/${TRUE} if the folder gets created successfully; 1/${FALSE} otherwise.
## <- RESULT: the new folder.
## Example:
##   if createTempFolder; then
##     echo "New folder: ${RESULT}";
##   fi
function createTempFolder() {
  local _dirname="${1}";
  local _prefix="${2}";
  local -i rescode;
  local result;

  if isEmpty "${_dirname}"; then
    _dirname="$(dirname ${SCRIPT_NAME})";
    if [ "${_dirname#\.\.}" == "${_dirname}" ]; then
      _dirname="${PWD}/${_dirname#\.}";
    else
      _dirname="${PWD}/../${_dirname#\.\.}";
    fi
  fi

  if isEmpty "${_prefix}"; then
    _prefix="$(echo ${SCRIPT_NAME} | awk -F"/" '{print $NF;}')";
  fi

  _mktempFolder "${_dirname}" ".${_prefix}.XXXXXX";
  rescode=$?;
  if isTrue ${rescode}; then
    result="${RESULT}";
  else
    _mktempFolder "${PWD}" ".${_prefix}.XXXXXX";
    rescode=$?;
    if isTrue ${rescode}; then
      result="${RESULT}";
    fi
  fi
  if isTrue ${rescode}; then
    addFileToCleanup "${result}";
    export RESULT="${result}";
  else
    export RESULT="";
  fi

  return ${rescode};
}

## Annotates a file to be removed.
## -> 1: The file to delete.
## Example:
##   addFileToCleanup "/tmp/my-log.txt";
function addFileToCleanup() {
  local _file="${1}";
  #  logTrace "Appending ${result} to _CLEANUP_FILES";

  if declare -p _CLEANUP_FILES > /dev/null 2>&1; then
    upvars -a$((${#_CLEANUP_FILES[@]}+1)) _CLEANUP_FILES "${_CLEANUP_FILES[@]}" "${_file}";
    export _CLEANUP_FILES;
  else
    export -a _CLEANUP_FILES=();
    upvars -a1 _CLEANUP_FILES "${_file}";
    export _CLEANUP_FILES;
  fi

#  local _oldIFS="${IFS}";
#  IFS=$' \t\n';
#  _CLEANUP_FILES=(\
#    $(for i in ${_CLEANUP_FILES[*]}; do echo $i; done) \
#      "${_file}" \
#  );
#  IFS="${_oldIFS}";
}


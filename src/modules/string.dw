## PUBLIC
## Checks whether the first parameter contains the second value.
## -> 1: The text.
## -> 2: The substring to check.
## <- 0/${TRUE} if the text contains the substring; 1/${FALSE} otherwise.
## Example:
##   if contains "abc" "b"; then
##     echo "abc contains b";
##   fi
function contains() {
  local _container="${1}";
  local _substring="${2}";
  local -i _rescode;

  checkNotEmpty "container" "${_container}" 1;
  checkNotEmpty "substring" "${_substring}" 2;

  if [[ "${_container}" =~ "${_substring}" ]]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## PUBLIC
## Checks whether the first parameter starts with the second value.
## -> 1: The text.
## -> 2: The substring to check.
## <- 0/${TRUE} if the text starts with the substring; 1/${FALSE} otherwise.
## Example:
##   if startsWith "abc" "a"; then
##     echo "abc starts with a";
##   fi
function startsWith() {
  local _container="${1}";
  local _substring="${2}";
  local -i _rescode;

  checkNotEmpty "container" "${_container}" 1;
  checkNotEmpty "substring" "${_substring}" 2;

  if areEqual "${_container#${_substring}}" "${_container}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## PUBLIC
## Checks whether the first parameter ends with the second value.
## -> 1: The text.
## -> 2: The substring to check.
## <- 0/${TRUE} if the text ends with the substring; 1/${FALSE} otherwise.
## Example:
##   if endsWith "abc" "c"; then
##     echo "abc ends with c";
##   fi
function endsWith() {
  local _container="${1}";
  local _substring="${2}";
  local -i _rescode;

  checkNotEmpty "container" "${_container}" 1;
  checkNotEmpty "substring" "${_substring}" 2;

  if areEqual "${_container%${_substring}}" "${_container}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## Converts given string to upper case.
## -> 1: The string to convert.
## <- RESULT: The converted string.
## Example:
##   local _text="abc";
##   toUpper "${_text}";
##   local _upcased="${RESULT}";
function toUpper() {
  local _text="${1}";
  checkNotEmpty "text" "${_text}" 1;
  local result=$(echo "${_text}" | awk '{print toupper($0);}');
  export RESULT="${result}";
}

## Removes the prefix of given string.
## -> 1: The string to convert.
## <- RESULT: The converted string.
## Example:
##   local _text="--abc";
##   if removePrefix "${_text}" "--*"; then
##     echo "${_text} -> ${RESULT}";
##   fi
function removePrefix() {
  local _text="${1}";
  local _prefix="${2}";
  local -i _rescode;
  local _result;

  checkNotEmpty "text" "${_text}" 1;
  checkNotEmpty "prefix" "${_prefix}" 2;

  _result="$(echo "${_text}" | sed -e "s/^${_prefix}//")";
  _rescode=$?;
  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## PUBLIC
## Normalizes given string: converts non-alphanumeric characters to underscore, and converts it to upper case.
## -> 1: The string to convert.
## <- RESULT: The normalized string.
##
## Example:
##   normalize "a_b.C" # returns "A_B_C";
function normalize() {
  local _text="${1}";
  checkNotEmpty "text" "${_text}" 1;
  local result=$(echo "${_text}" | tr -c '[[:alnum:]]' '_' | sed 's/_*$//g' | awk '{print toupper($0);}');
  export RESULT="${result}";
}

function replaceNLeftmostTokens() {
  local _text="$1";
  local _newToken="$2";
  local _number=$(($3));
  local _separator="$4";
  local result=$(echo "${_text}" | awk -F"${_separator}" -vd=${_number} -vnewT="${_newToken}" -vseparator="${_separator}" '{for (i=0;i<d&&i<NF;i++) {printf("%s%s", newT, separator);}for (i=d+2;i<=NF;i++){printf("%s%s", $i, separator);}}END{printf("\n");}' | sed "s ${_separator}$  g");
  export RESULT="${result}";
}

function replaceNRightmostTokens() {
  local _text="$1";
  local _newToken="$2";
  local _number=$(($3));
  local _separator="$4";
  local result=$(echo "${_text}" | awk -F"${_separator}" -vd=${_number} -vnewT="${_newToken}" -vseparator="${_separator}" '{for (i=NF;i>NF-d&&i>0;i--) {if (newT!="") {printf("%s%s", newT, separator);}}for (i=NF-d;i>0;i--){printf("%s%s", $i, separator);}}END{printf("\n");}' | sed "s ${_separator}$  g");
  export RESULT="${result}";
}



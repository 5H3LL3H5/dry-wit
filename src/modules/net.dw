# Network functions

import package;

## Retrieves all regular (excluding localhost, VPN, Docker, VirtualBox, etc) network interfaces.
## <- RESULT: the interface names.
## Usage:
##   if retrieveIfaces; then
##     echo "Interfaces: ${RESULT}";
##   fi
function retrieveIfaces() {
  local _result;
  local -i _rescode;

  if isInstalled "ip"; then
    logTrace -n "Finding out the names of the network interfaces";
    _result="$(ip addr show 2> /dev/null | awk '/inet.*brd/{print $NF}'  | grep -v -e '^docker' | grep -v -e '^lo$' | grep -v -e '^tun' | grep -v -e '^vbox' | grep -v -e '^veth' | grep -v -e '^br-')";
    _rescode=$?;
    if isTrue ${_rescode}; then
      logTraceResult SUCCESS "$(echo ${_result})";
      export RESULT="${_result}";
    else
      logTraceResult FAILED "failed";
    fi
  elif isInstalled "ifconfig"; then
    logTrace -n "Finding out the names of the network interfaces";
    _result="$(ifconfig 2> /dev/null | cut -d' ' -f1 | grep -v -e '^$' | tr ' ' '\n' | tr -d ':' | grep -v -e '^docker' | grep -v -e '^lo$' | grep -v -e '^tun' | grep -v -e '^vbox' | grep -v -e '^veth' | grep -v -e '^br-')";
    _rescode=$?;
    if isTrue ${_rescode}; then
      logTraceResult SUCCESS "$(echo ${_result})";
      export RESULT="${_result}";
    else
      logTraceResult FAILED "failed";
    fi
  fi

  return ${_rescode};
}

## Retrieves the first network interface.
## <- RESULT: such interface name.
## Usage:
##   if retrieveIface; then
##     echo "Interface candidate: ${RESULT}";
##   fi
function retrieveIface() {
  local _result;
  local -i _rescode=${FALSE};

  if retrieveIfaces; then
    _result="$(echo "${RESULT}" | awk -F' ' '{print $1;}')";
    _rescode=$?;
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export RESULT="";
  fi

  return ${_rescode};
}

## Retrieves the /24 subnet of given network interface.
## -> 1: The interface name.
## <- 0/${TRUE} if the subnet information is available; 1/${FALSE} otherwise.
## <- RESULT: the device where the root filesystem is stored.
## Usage:
##   if retrieveSubnet24 "eth0"; then
##     echo "The /24 subnet for eth0 is ${RESULT}"
##   fi
function retrieveSubnet24() {
  local _iface="${1}";
  local _ip;
  local -i rescode=${FALSE};
  local _result;

  checkNotEmpty "iface" "${_iface}" 1;

  if retrieveIp "${_iface}"; then
      _ip="${RESULT}";
      _result="$(echo ${_ip} | awk -F'.' '{printf("%d.%d.%d.0/24\n", $1, $2, $3);}')";

      if isEmpty ${_result}; then
          rescode=${FALSE}
      else
        export RESULT="${_result}";
        rescode=${TRUE};
      fi
  fi

  return ${rescode};
}

## Retrieves the IP for given interface.
## -> 1: the interface name.
## <- 0/${TRUE} if the IP is up; 1/${FALSE} otherwise.
## <- RESULT: The IP.
## Example:
##   if retrieveIp "eth0"; then
##     echo "IP: ${RESULT}";
##   fi
function retrieveIp() {
  local _iface="${1}";
  local -i _rescode;
  local _result;

  checkNotEmpty "interface" "${_iface}" 1;

  if isInstalled "ifconfig"; then
    _result="$(ifconfig ${_iface} 2> /dev/null | grep 'inet ' | sed 's/ addr:/:/g' | sed 's/inet /inet:/g' | cut -d':' -f 2 | awk '{print $1;}')";
    _rescode=$?;
  elif isInstalled "ip"; then
    _result="$(ip -4 -o addr show dev ${_iface} 2> /dev/null | awk '{split($4,a,"/");print a[1]}')";
    _rescode=$?;
  else
    _rescode=${FALSE};
    export RESULT="Neither ifconfig nor ip are available";
  fi

  if isTrue ${_rescode}; then
    export RESULT=${_result};
  fi

  return ${_rescode};
}

## Retrieves the IP of the default interface.
## <- 0/${TRUE} if the IP can be retrieved; 1/${FALSE} otherwise.
## <- RESULT: The IP.
## Example:
##   if retrieveOwnIp; then
##     echo "My IP is ${RESULT}";
##   fi
function retrieveOwnIp() {
  local -i _rescode;
  local _result;
  local _oldIFS="${IFS}";
  local _iface;
  local _ifaces;
  IFS=$' \t\n';

  if retrieveIfaces; then
      _ifaces="${RESULT}";
      for _iface in ${_ifaces}; do
        if retrieveIp "${_iface}"; then
            _result="${RESULT}";
            break;
        fi;
      done;
  fi
  IFS="${_oldIFS}";

  if isEmpty "${_result}"; then
      _rescode="${FALSE}";
      export RESULT="";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Checks whether given host is reachable.
## -> 1: The host to check.
## <- 0/${TRUE} if the host is reachable; 1/${FALSE} otherwise.
## Example:
##   if hostIsReachable "www.google.com"; then
##     echo "www.google.com is reachable";
##   fi
function hostIsReachable() {
  local _host="${1}";
  local -i _rescode;

  checkNotEmpty "host" "${_host}" 1;

  ping -c1 -W1 ${_host} > /dev/null
  _rescode=$?;

  return ${_rescode};
}

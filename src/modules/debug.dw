## Tries to declare a variable with given arguments.
## -> 1: The variable name.
## -> 2+: The variable value(s).
## Example:
##   debugVariable "foo" "bar";
function debugVariable() {
  local _name="${1}";
  shift;
  local _value="${@}";

  declare -t "${_name}"="${_value}";
#  trap "echo ${_name} is being used here." DEBUG
}

## Prints the contents of given array.
## -> 1: The name of the array.
## Example:
##   A=( "1" "2" "3" );
##   debugArray "${A}"
function debugArray() {
  DW.import array;
  flattenArray "${1}" " + ";
  debugEcho "${RESULT}";
}

## Prints the contents of given associative array.
## -> 1: The name of the associative array.
## Example:
##   A=( [foo]=bar [other key]="other value" );
##   debugArray "${A}"
function debugAssociativeArray() {
  local _associativeArrayName="${1}";
  DW.import array;

  checkNotEmpty "associativeArrayName" "${_associativeArrayName}" 1;

  debugEcho "BEGIN processing array ${_associativeArrayName}";

  forEachAssociativeArrayEntryDo "${_associativeArrayName}" debugAssociativeArrayEntry;

  debugEcho "DONE processing array ${_associativeArrayName}";
}

## Callback to be called to debug a specific entry in an associative array.
## -> 1: The entry key. Mandatory.
## -> 2: The entry value. Could be empty.
## Example:
##   forEachAssociativeArrayEntryDo MY_ASSOCIATIVE_ARRAY debugAssociativeArrayEntry;
function debugAssociativeArrayEntry() {
  local _key="${1}";
  local _value="${2}";

  checkNotEmpty "key" "${_key}" 1;

  debugEcho "${_key} -> ${_value}";
}

## Traces the API call to the default log file using in development.
## Example:
##   traceApiCall;
function traceApiCall() {
  local -i _i=0;
  local _logFile;

  DEBUG.getDebugLogFile;
  _logFile="${RESULT}";

  echo "${FUNCNAME[0]}" >> ${_logFile};
  while caller $i >> ${_logFile}; do
    i=$((i+1))
  done
}

## Specifies the log file for debugging purposes.
## -> 1: The log file.
## Example:
##   setDebugLogFile "/tmp/.dw-debug.log";
function setDebugLogFile() {
  local _file="${1}";
  local -i _rescode=${TRUE};

  if isNotEmpty "${_file}"; then
    mkdir -p "$(dirname "${_file}")";
    touch "${_file}";
    _rescode=$?;
  fi

  if isTrue ${_rescode}; then
    export __DW_DEBUG_LOG_FILE="${_file}";
  fi

  return ${_rescode};
}

## Retrieves the log file for debugging purposes.
## <- The log file.
## Example:
##   DEBUG.getDebugLogFile;
##   echo "log file -> ${RESULT}";
function DEBUG.getDebugLogFile() {
  export RESULT="${__DW_DEBUG_LOG_FILE}";
}

## Specifies whether "debugEcho" is enabled.
## -> 1: That condition.
## Example:
##   setDebugEchoEnabled TRUE
function setDebugEchoEnabled() {
  local _flag="${1}";

  checkNotEmpty "flag" "${_flag}" 1;

  if isTrue "${_flag}"; then
    export __DW_DEBUG_ECHO_ENABLED=${TRUE};
  else
    export __DW_DEBUG_ECHO_ENABLED=${FALSE};
  fi
}

## Retrieves whether "debugEcho" is enabled.
## <- 0/${TRUE} if it's enabled; 1/${FALSE} otherwise.
## Example:
##   if isDebugEchoEnabled; then
##      ..
##   fi
function isDebugEchoEnabled() {
  local -i _rescode;

  if isTrue ${__DW_DEBUG_ECHO_ENABLED}; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Echoes a line to stdout. Useful for locating them easily when debugging.
## -> 1: The message to print.
## Example:
##   debugEcho "message";
function debugEcho() {
  local _logFile;

  if isDebugEchoEnabled; then
    DEBUG.getDebugLogFile;
    _logFile="${RESULT}";
    echo $* >> "${_logFile}";
  fi
}

function DEBUG.defaultState() {
  setDebugLogFile "${TEMP:-/tmp}/$(basename ${SCRIPT_NAME})-debug.$(date '+%Y%m%d%H%M%S').log";
  setDebugEchoEnabled TRUE;
}

function DEBUG.resetState() {
  setDebugLogFile "";
}

declare -gx __DW_DEBUG_LOG_FILE;
declare -gx __DW_DEBUG_ECHO_ENABLED;

DEBUG.defaultState;
#

declare -g EXPECTS_ARGUMENT=${TRUE};
declare -g NO_ARGUMENT=${FALSE};
declare -g SINGLE=${FALSE};
declare -g MULTIPLE=${TRUE};

import debug;
import envvar;

# Checks whether a given flag is enabled.
# -> 1: the name of the flag variable.
# <- 0 if the flag is enabled, 1 otherwise.
# Example:
#   if flagEnabled MY_FLAG; then
#    ..
#   fi
function flagEnabled() {
  local _flagVar="${1}";
  local _flagVal;
  local -i rescode;

  checkNotEmpty "flagVar" "${_flagVar}" 1;

  evalVar "${_flagVar}";
  _flagVal="${RESULT}";
  if    areEqual "${_flagVal}" "${TRUE}" \
     || areEqual "${_flagVal}" "TRUE"; then
    rescode=${TRUE};
  else
    rescode=${FALSE};
  fi

  return ${rescode};
}

## Extracts the flags from the arguments.
## -> *: The arguments to process.
## <- [STDOUT]: the flags.
## Example:
##   local _myFlags=$(extractFlags $*);
function extractFlags() {
  echo " $@" \
    | awk -F" -" '{for (i=2; i<=NF; i++){printf("-%s \n", $i);}}' \
    | awk -F" " '{print $1;}'
}

## Extracts the flag value for the arguments.
## -> 1: The flag name.
## -> 2-*: The arguments.
## <- [STDOUT]: the flag value.
## Example:
##   local _Ext=$(extractFlagValue "ext" $*);
function extractFlagValue() {
  local _flag=${1};
  shift;
  echo " $@" \
    | awk -F" -" '{printf("-"); for (i=2; i<=NF; i++){if(i%2 == 1) {printf("-");}; printf("%s \n", $i);}}' \
    | grep -e "^${_flag} " \
    | awk -v f="${_flag}" '{printf("echo \"%s\" | sed -e \"s_^%s __g\"\n", $2, f);}' \
    | sh;
}

## Retrieves the long format of the flag whose short name is provided.
## -> 1: The long name of the flag.
## <- 0/${TRUE} if the long name is found; 1/${FALSE} otherwise.
## <- RESULT: The long name.
## Example:
##   if CLI.retrieveCommandLineFlagShortNameForLongName "file"; then
##     echo "Short name of 'file' is ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagShortNameForLongName() {
  local _longName="${1}";
  local -i _rescode;
  local _result;

  checkNotEmpty "longName" "${_longName}" 1;

  _result="${__DW_CLI_FLAG_SHORT_NAMES[${_longName}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Retrieves whether given flag is in long format.
## -> 1: the flag.
## <- 0/${TRUE} if the flag is in long format; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineFlagInLongFormat "${flag}"; then
##     echo "Flag ${flag} is in long format";
##   fi
function CLI.isCommandLineFlagInLongFormat() {
  local _flag="${1}";
  local -i _rescode;

  checkNotEmpty "flag" "${_flag}" 1;

  if areEqual "${_flag}" "${_flag#--}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## Retrieves the short format of the flag whose long name is provided.
## -> 1: The short name of the flag.
## <- 0/${TRUE} if the short name is found; 1/${FALSE} otherwise.
## <- RESULT: The short name.
## Example:
##   if CLI.retrieveCommandLineFlagLongNameForShortName "f"; then
##     echo "Long name of 'f' is ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagLongNameForShortName() {
  local _shortName="${1}";
  local -i _rescode;
  local _result;

  checkNotEmpty "shortName" "${_shortName}" 1;

  _result="${__DW_CLI_FLAG_LONG_NAMES[${_shortName}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Retrieves whether given flag is in short format.
## -> 1: the flag.
## <- 0/${TRUE} if the flag is in short format; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineFlagInShortFormat "${flag}"; then
##     echo "Flag ${flag} is in short format";
##   fi
function CLI.isCommandLineFlagInShortFormat() {
  local _flag="${1}";
  local -i _rescode;

  checkNotEmpty "flag" "${_flag}" 1;

  if areEqual "${_flag}" "${_flag#-}" || CLI.isCommandLineFlagInLongFormat "${_flag}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## Checks the command-line arguments.
## -> *: The command-line arguments.
## <- 0/${TRUE} if the command-line arguments were checked successfully; 1/${FALSE} otherwise.
function checkInput() {
  local _flags=$(extractFlags $@);
  local _flag;
  local -a _flagsChecked=();

  local _oldIFS="${IFS}";

  # Flags
  IFS=$' \t\n';
  for _flag in ${_flags}; do
    IFS="${_oldIFS}";
    _flagCount=$((_flagCount+1));
    shift;

    CLI.checkFlag "${_flag}" $@;
    _flagsChecked[${#_flagsChecked[@]}]="${_flag}";
  done
  IFS="${_oldIFS}";

  CLI.checkForMissingMandatoryCommandLineFlags "${_flagsChecked[*]}";

  CLI.checkCommandLineParameters $@;

  CLI.checkEnvironmentVariables;
}

## Perform some checks on given flag.
## -> 1: The flag to check.
## Example:
##   CLI.checkFlag "-f";
function CLI.checkFlag() {
  local _flag="${1}";
  shift;
  local _flagKey;
  local _shortName;
  local _longName;
  local _continue=${TRUE};

  checkNotEmpty "flag" "${_flag}" 1;

  case ${_flag} in
    --)
      shift;
      _continue=${FALSE};
      ;;
  esac

  if isTrue ${_continue}; then
    if CLI.retrieveCommandLineFlagLongName "${_flag}"; then
      _longName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    if CLI.retrieveCommandLineFlagShortName "${_flag}"; then
      _shortName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}";
    _flagKey="${RESULT}";

    if arrayDoesNotContain "${__DW_CLI_FLAG_KEYS[*]}" "${_flagKey}"; then
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    CLI.checkCommandLineFlag "${_flagKey}" "${_longName}" $@;
  fi
}

## Retrieves the long name of a flag.
## -> 1: The flag.
## <- 0/${TRUE} if the long name was retrieved; 1/${FALSE} otherwise.
## <- RESULT: The long name.
## Example:
##   if CLI.retrieveCommandLineFlagLongName "-f"; then
##     echo "long name: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagLongName() {
  local _flag="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "flag" "${_flag}" 1;

  if CLI.isCommandLineFlagInLongFormat "${_flag}"; then
    _result="${_flag#--}";
    _rescode=${TRUE};
  elif CLI.isCommandLineFlagInShortFormat "${_flag}" && CLI.retrieveCommandLineFlagLongNameForShortName "${_flag#-}"; then
    _result="${RESULT}";
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Retrieves the short name of a flag.
## -> 1: The flag.
## <- 0/${TRUE} if the short name was retrieved; 1/${FALSE} otherwise.
## <- RESULT: The short name.
## Example:
##   if CLI.retrieveCommandLineShortName "--file"; then
##     echo "short name: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagShortName() {
  local _flag="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "flag" "${_flag}" 1;

  if CLI.isCommandLineFlagInLongFormat "${_flag}" && CLI.retrieveCommandLineFlagShortNameForLongName "${_flag#--}"; then
    _result="${RESULT}";
    _rescode=${TRUE};
  elif CLI.isCommandLineFlagInShortFormat "${_flag}"; then
    _result="${_flag#-}";
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Checks a command line flag.
## -> 1: The flag.
## Example:
##   CLI.checkCommandLineFlag "${_flagKey}";
function CLI.checkCommandLineFlag() {
  local _flagKey="${1}";
  local _longName="${2}";
  shift;
  shift;
  local _argument;
  local _longNameInUpperCase;
  local -i _functionDefined;
  local -i _mandatory;

  checkNotEmpty "flagKey" "${_flagKey}" 1;
  checkNotEmpty "longName" "${_longName}" 2;

  if isFunctionDefined "dw_check_${_longName}_cli_flag"; then
    _functionDefined=${TRUE};
  fi

  if CLI.isCommandLineFlagMandatory "${_flagKey}"; then
    _mandatory=${TRUE};
  fi

  if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
    _argument="${1}";
    shift;
    toUpper "${_longName}";
    _longNameInUpperCase="${RESULT}";
    if isTrue ${_mandatory} && isEmpty "${_argument}"; then
      exitWithError "${_longNameInUpperCase}_EXPECTS_AN_ARGUMENT" "${_longName} flag expects an argument";
    fi
    if isTrue ${_functionDefined}; then
      "dw_check_${_longName}_cli_flag" "${_argument}";
    fi
  elif isTrue ${_functionDefined}; then
    "dw_check_${_longName}_cli_flag";
  fi
}

## Checks for mandatory command line flags that are declared but not provided.
## -> 1: The flags provided.
## Example:
##   CLI.checkForMissingMandatoryCommandLineFlags "-f --file -v -vv";
function CLI.checkForMissingMandatoryCommandLineFlags() {
  local _flagsChecked="$@";
  local _key;
  local _longName;
  local _longNameInUpperCase;
  local _oldIFS="${IFS}";

  if isNotEmpty "${__DW_CLI_FLAG_KEYS[*]}"; then
    IFS=$' \t\n';
    for _key in ${__DW_CLI_FLAG_KEYS[*]}; do
      IFS="${_oldIFS}";
      CLI.retrieveCommandLineFlagLongNameFromKey "${_key}";
      _longName="${RESULT}";
      toUpper "${_longName}";
      _longNameInUpperCase="${RESULT}";
      if isEmpty "${_flagsChecked}" || ! CLI.isCommandLineFlagAlreadyChecked "${_flagsChecked}" "${_key}"; then
        if CLI.isCommandLineFlagMandatory "${_key}"; then
          exitWithError "${_longNameInUpperCase}_IS_MANDATORY" "${_longName} flag is mandatory";
        fi
      fi
      if isFunctionDefined "dw_check_${_longName}_cli_flag"; then
        "dw_check_${_longName}_cli_flag";
      fi
    done
    IFS="${_oldIFS}";
  fi
}

## Checks whether the flag has been already checked.
## -> 1: The already-checked flags.
## -> 2: The flag key to check.
## <- 0/${TRUE} if the flag has been checked; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineFlagAlreadyChecked "-f -v -h" "${flagKey}"; then
##     echo "${flagKey} already checked";
##   fi
function CLI.isCommandLineFlagAlreadyChecked() {
  local _flagsAlreadyChecked="${1}";
  local _flagKey="${2}";
  local -i _rescode;

  checkNotEmpty "flagsAlreadyChecked" "${_flagsAlreadyChecked}" 1;
  checkNotEmpty "flagKey" "${_flagKey}" 2;

  CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
  _longName="--${RESULT}";
  CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
  _shortName="-${RESULT}";

  if    arrayContains "${_flagsAlreadyChecked}" "${_longName}" \
     || arrayContains "${_flagsAlreadyChecked}" "${_shortName}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}
## Checks the command-line parameters.
## -> *: The parameters provided.
## Example:
##   CLI.checkCommandLineParameters "/tmp/1.txt" "http://www.example.com";
function CLI.checkCommandLineParameters() {
  local _parameterName;
  local _parameterValue;
  local _parameterNameInUpperCase;
  local -i _callbackDefined;
  local -i _mandatory;
  local -i _multiple;

  # Parameters
  IFS=$' \t\n';
  for _parameterName in ${__DW_CLI_PARAMETER_NAMES[*]}; do
    IFS="${_oldIFS}";
    _parameterValue="${1}";
    shift;
    if CLI.isCommandLineParameterMandatory "${_parameterName}"; then
      _mandatory=${TRUE};
    else
      _mandatory=${FALSE};
    fi
    if isFunctionDefined "dw_check_${_parameterName}_cli_parameter"; then
      _callbackDefined=${TRUE};
    else
      _callbackDefined=${FALSE};
    fi
    if CLI.isCommandLineParameterMultiple "${_parameterName}"; then
      _multiple=${TRUE};
    else
      _multiple=${FALSE};
    fi
    if isEmpty "${_parameterValue}" && isTrue ${_mandatory}; then
      toUpper "${_parameterName}";
      _parameterNameInUpperCase="${RESULT}";
      exitWithError "${_parameterNameInUpperCase}_IS_MANDATORY" "${_parameterName} is mandatory";
    fi
    if isTrue ${_callbackDefined}; then
      if isTrue ${_multiple}; then
        "dw_check_${_parameterName}_cli_parameter" "${_parameterValue}" ${@};
      else
        "dw_check_${_parameterName}_cli_parameter" "${_parameterValue}";
      fi
    fi
  done
  IFS="${_oldIFS}";
}

## Checks the environment variables.
## Example:
##   CLI.checkEnvironmentVariables;
function CLI.checkEnvironmentVariables() {
  local _envVars;
  local -i _callbackDefined;
  local _envVarName;
  local _envVarValue;
  local _envVarNameInLowerCase;

  retrieveCustomEnvironmentVariables;
  _envVars="${RESULT}";

  local _oldIFS="${IFS}";

  IFS=$' \t\n';
  for _envVarName in ${_envVars}; do
    IFS="${_oldIFS}";

    if isEnvVarMandatory "${_envVarName}"; then
      evalVar "${_envVarName}";
      _envVarValue="${RESULT}";
      if isEmpty "${_envVarValue}"; then
        exitWithError "${_envVarName}_IS_MANDATORY" "${_envVarName} environment variable is mandatory";
      fi
    fi

    toLower "${_envVarName}";
    _envVarNameInLowerCase="${RESULT}";
    if isFunctionDefined "dw_check_${_envVarNameInLowerCase}_cli_envvar"; then
      _callbackDefined=${TRUE};
    else
      _callbackDefined=${FALSE};
    fi
    if isTrue ${_callbackDefined}; then
      "dw_check_${_envVarNameInLowerCase}_cli_envvar" "${_envVar}"
    fi
  done
  IFS="${_oldIFS}";
}

## Parses the command-line arguments.
## -> *: The command-line arguments.
## <- 0/${TRUE} if the command-line arguments were parsed successfully; 1/${FALSE} otherwise.
function parseInput() {
  local _flags=$(extractFlags $@);
  local _oldIFS="${IFS}";

  # Flags
  IFS="${DWIFS}";
  for _flag in ${_flags}; do
    IFS="${_oldIFS}";
    shift;

    CLI.parseFlag "${_flag}" ${@};
    _shifts=$?;
    IFS="${DWIFS}";
    for _i in $(seq 1 ${_shifts}); do
      IFS="${_oldIFS}";
      shift;
    done
  done
  IFS="${_oldIFS}";

  CLI.parseCommandLineParameters ${@};
}

## Parses given flag.
## -> 1: The flag to parse.
## -> @: The rest of the command-line flags and parameters.
## <- The number of parameters to shift.
## Example:
##   CLI.parseFlag "-f" $@;
##   echo "Must shift $?";
function CLI.parseFlag() {
  local _flag="${1}";
  shift;
  local -i _result=1;
  local _flagCount;
  local _longName;
  local _shortName;
  local _flagKey;
  local -i _continue=${TRUE};

  checkNotEmpty "${_flag}" "flag" 1;

  _flagCount=$((_flagCount+1));
  case ${_flag} in
    --)
      _continue=${FALSE};
      ;;
  esac

  if isTrue ${_continue}; then
    if CLI.retrieveCommandLineFlagLongName "${_flag}"; then
      _longName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    if CLI.retrieveCommandLineFlagShortName "${_flag}"; then
      _shortName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}";
    _flagKey="${RESULT}";

    if arrayContains "${__DW_CLI_FLAG_KEYS[*]}" "${_flagKey}"; then
      if isFunctionDefined "dw_parse_${_longName}_cli_flag"; then
        if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
          _argument="${1}";
          _result=$((_result+1));
          "dw_parse_${_longName}_cli_flag" "${_argument}";
        else
          "dw_parse_${_longName}_cli_flag";
        fi
      fi
    else
      exitWithError INVALID_OPTION "Unexpected flag: ${_flag}";
    fi
  fi

  return ${_result};
}

## Parses the command-line parameters.
## -> 1: The CLI parameters.
## Example:
##   CLI.parseCommandLineParameters "/tmp/1.txt" "http://www.example.com"
function CLI.parseCommandLineParameters() {
  local _parameterName;
  local _parameterValue;
  local _oldIFS="${IFS}";

  IFS="${DWIFS}";
  for _parameterName in ${__DW_CLI_PARAMETER_NAMES[*]}; do
    IFS="${_oldIFS}";
    if isFunctionDefined "dw_parse_${_parameterName}_cli_parameter"; then
      if CLI.isCommandLineParameterMultiple "${_parameterName}"; then
        "dw_parse_${_parameterName}_cli_parameter" ${@};
      else
        _parameterValue="${1}";
        shift;
        "dw_parse_${_parameterName}_cli_parameter" "${_parameterValue}";
      fi
    else
      toUpper "${_parameterName}";
      _parameterNameInUpperCase="${RESULT}";
      exitWithError "MISSING_PARSE_FUNCTION_FOR_PARAMETER_${_parameterNameInUpperCase}" "dw_parse_${_parameterName}_cli_parameter function is not defined";
    fi
  done
  IFS="${_oldIFS}";
}

## Builds a key for given command-line flag.
## -> 1: The short name of the flag.
## -> 2: The long name of the flag.
## <- 0/${TRUE} if the key was built successfully; 1/${FALSE} otherwise.
## <- RESULT: The key.
## Example:
##   if CLI.buildCommandLineFlagKey "f" "file"; then
##     echo "key: ${RESULT}";
##   fi
function CLI.buildCommandLineFlagKey() {
  local _shortName="${1}";
  local _longName="${2}";
  local -i _rescode=${TRUE};

  checkNotEmpty "shortName" "${_shortName}" 1;
  checkNotEmpty "longName" "${_longName}" 2;

  export RESULT="${_shortName}|${_longName}";

  return ${_rescode};
}

## Retrieves the key of a command-line flag from its short name.
## -> 1: The short name of the flag.
## <- 0/${TRUE} if the key was built successfully; 1/${FALSE} otherwise.
## <- RESULT: The key.
## Example:
##   if CLI.retrieveCommandLineFlagKeyFromShortName "f"; then
##     echo "key: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagKeyFromShortName() {
  local _shortName="${1}";
  local -i _rescode=${TRUE};

  checkNotEmpty "shortName" "${_shortName}" 1;

  if removePrefix "${_shortName}" "-*"; then
    _shortName="${RESULT}";
  fi
  _longName="${__DW_CLI_FLAG_LONG_NAMES[${_shortName}]}";

  if isNotEmpty "${_longName}"; then
    if CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}"; then
      _rescode=${TRUE};
      ## RESULT is passed directly.
    else
      _rescode=${FALSE};
      export RESULT="";
    fi
  else
    _rescode=${FALSE};
    export RESULT="";
  fi

  return ${_rescode};
}

## Retrieves the key of a command-line flag from its long name.
## -> 1: The long name of the flag.
## <- 0/${TRUE} if the key was built successfully; 1/${FALSE} otherwise.
## <- RESULT: The key.
## Example:
##   if CLI.retrieveCommandLineFlagKeyFromLongName "file"; then
##     echo "key: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagKeyFromLongName() {
  local _longName="${1}";
  local -i _rescode=${TRUE};

  checkNotEmpty "longName" "${_longName}" 1;

  if removePrefix "${_longName}" "-*"; then
    _longName="${RESULT}";
  fi

  _shortName="${__DW_CLI_FLAG_SHORT_NAMES[${_longName}]}";
  if isNotEmpty "${_shortName}"; then
    if CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}"; then
      _rescode=${TRUE};
      ## RESULT is passed directly.
    else
      _rescode=${FALSE};
      export RESULT="";
    fi
  else
    _rescode=${FALSE};
    export RESULT="";
  fi

  return ${_rescode};
}

## Retrieves the short name of given command-line flag key.
## -> 1: The key.
## <- 0/${TRUE} if the short name was found; 1/${FALSE} otherwise.
## <- RESULT: The short name.
## Example:
##   if CLI.retrieveCommandLineFlagShortNameFromKey "f|file"; then
##     echo "short name: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagShortNameFromKey() {
  local _key="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "key" "${_key}" 1;

  _result="${_key%%|*}";
  if areEqual "${_result}" "${_key}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Retrieves the long name of given command-line flag key.
## -> 1: The key.
## <- 0/${TRUE} if the long name was found; 1/${FALSE} otherwise.
## <- RESULT: The long name.
## Example:
##   if CLI.retrieveCommandLineFlagLongNameFromKey "f|file"; then
##     echo "long name: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagLongNameFromKey() {
  local _key="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "key" "${_key}" 1;

  _result="${_key##*|}";
  if areEqual "${_result}" "${_key}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Retrieves the description of given command-line flag key.
## -> 1: The key.
## <- 0/${TRUE} if the description was found; 1/${FALSE} otherwise.
## <- RESULT: The description.
## Example:
##   if CLI.retrieveCommandLineFlagDescriptionFromKey "f|file"; then
##     echo "Description: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagDescriptionFromKey() {
  local _key="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "key" "${_key}" 1;

  _result="${__DW_CLI_FLAG_DESCRIPTIONS[${_key}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Adds a command-line flag.
## -> 1: The long name of the flag.
## -> 2: The short name of the flag.
## -> 3: The flag description.
## -> 4: EXPECTS_ARGUMENT if the flag contains a value; NO_ARGUMENT otherwise.
## -> 5: MANDATORY if the flag is mandatory; OPTIONAL otherwise.
## <- 0/${TRUE} if the flag is added successfully; 1/${FALSE} otherwise.
## Example:
##   if addCommandLineFlag "file" "f" "The file to read" MANDATORY EXPECTS_ARGUMENT; then
##     echo "-f|--file flag added"
##   fi
function addCommandLineFlag() {
  local _longName="${1}";
  local _shortName="${2}";
  local _description="${3}";
  local _mandatory="${4}";
  local _expectsArgument="${5}";
  local -i _rescode=${TRUE};
  local _flagKey;
  local _longNameInUpperCase;

  checkNotEmpty "longName" "${_longName}" 1;
  checkNotEmpty "shortName" "${_shortName}" 2;
  checkNotEmpty "description" "${_description}" 3;
  checkOneOf "mandatory" "${_mandatory}" "MANDATORY OPTIONAL" 4;
  checkOneOf "expectsArgument" "${_expectsArgument}" "EXPECTS_ARGUMENT NO_ARGUMENT" 5;

  if removePrefix "${_longName}" "-*"; then
    _longName="${RESULT}";
  fi
  if removePrefix "${_shortName}" "-*"; then
    _shortName="${RESULT}";
  fi

  CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}";
  _flagKey="${RESULT}";

  if   isEmpty "${__DW_CLI_FLAG_KEYS[*]}" \
     || arrayDoesNotContain "${__DW_CLI_FLAG_KEYS[*]}" "${_flagKey}"; then
    __DW_CLI_FLAG_KEYS[${#__DW_CLI_FLAG_KEYS[@]}]="${_flagKey}";
    __DW_CLI_FLAG_SHORT_NAMES[${_longName}]="${_shortName}";
    __DW_CLI_FLAG_LONG_NAMES[${_shortName}]="${_longName}";
    __DW_CLI_FLAG_DESCRIPTIONS[${_flagKey}]="${_description}";
    toUpper "${_longName}";
    _longNameInUpperCase="${RESULT}";
    if areEqual "${_mandatory}" "MANDATORY"; then
      addError "${_longNameInUpperCase}_IS_MANDATORY" "${_longName} is mandatory";
    fi
    __DW_CLI_MANDATORY_FLAGS[${_flagKey}]=${_mandatory};
    if areEqual "${_expectsArgument}" "EXPECTS_ARGUMENT"; then
      addError "${_longNameInUpperCase}_EXPECTS_AN_ARGUMENT" "${_longName} expects an argument";
    fi
    __DW_CLI_FLAG_EXPECTING_ARGUMENTS[${_flagKey}]="${_expectsArgument}";
  fi

  return ${_rescode};
}

## Removes a command-line flag.
## -> 1: The flag (either short or long name).
## <- 0/${TRUE} if the flag is removed successfully; 1/${FALSE} otherwise.
## Example:
##   if removeCommandLineFlag "--file"; then
##     echo "--file flag removed";
##   fi
function removeCommandLineFlag() {
  local _flag="${1}";
  local _longName;
  local _shortName;
  local -i _rescode;
  local _flagKey;

  checkNotEmpty "flag" "${_flag}" 1;

  if CLI.retrieveCommandLineFlagKey "${_flag}"; then
    _flagKey="${RESULT}";

    if   isNotEmpty "${_flagKey}" \
      && isNotEmpty "${__DW_CLI_FLAG_KEYS[*]}" \
      && arrayContains "${__DW_CLI_FLAG_KEYS[*]}" "${_flagKey}"; then
      __DW_CLI_FLAG_KEYS=( "${__DW_CLI_FLAG_KEYS[@]/${_flagKey}}" );
      CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
      _longName="${RESULT}";
      CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
      _shortName="${RESULT}";
      unset __DW_CLI_FLAG_SHORT_NAMES[${_longName}];
      unset __DW_CLI_FLAG_LONG_NAMES[${_shortName}];
      unset __DW_CLI_FLAG_DESCRIPTIONS[${_flagKey}];
      unset __DW_CLI_MANDATORY_FLAGS[${_flagKey}];
      unset __DW_CLI_FLAG_EXPECTING_ARGUMENTS[${_flagKey}];
    fi

  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Retrieves the command-line flag flag.
## -> 1: The flag (either short or long version).
## <- 0/${TRUE} if the flag is defined; 1/${FALSE} otherwise.
## Example:
##   if CLI.retrieveCommandLineFlagKey "-f"; then
##     echo "flag key for -f: ${RESULT}";
##   fi
function CLI.retrieveCommandLineFlagKey() {
  local _flag="${1}";
  local -i _rescode;

  checkNotEmpty "flag" "${_flag}" 1;

  if CLI.retrieveCommandLineFlagKeyFromShortName "${_flag}"; then
    _rescode=${TRUE};
    ## RESULT gets passed through.
  elif CLI.retrieveCommandLineFlagKeyFromLongName "${_flag}"; then
    _rescode=${TRUE};
    ## RESULT gets passed through.
  else
    _rescode=${FALSE};
    export RESULT="";
  fi

  return ${_rescode};
}

## Check whether a command-line flag is defined already or not.
## -> 1: The flag (either short or long version).
## <- 0/${TRUE} if the flag is defined; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineFlagDefined "-f"; then
##     echo "-f is already defined";
##   fi
function CLI.isCommandLineFlagDefined() {
  local _flag="${1}";
  local -i _rescode;
  local _flagKey;

  checkNotEmpty "flag" "${_flag}" 1;

  if CLI.retrieveCommandLineFlagKey "${_flag}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Checks whether given flag is mandatory or not.
## -> 1: The flag key.
## <- 0/${TRUE} if the flag is mandatory; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineFlagMandatory ${flagKey}"; then
##     echo "${flagKey} is mandatory";
##   fi
function CLI.isCommandLineFlagMandatory() {
  local _flagKey="${1}";
  local -i _rescode;

  checkNotEmpty "flagKey" "${_flagKey}" 1;

  _value="${__DW_CLI_MANDATORY_FLAGS[${_flagKey}]}";

  if   isEmpty "${_value}" \
    || isTrue "${_value}" \
    || areEqual "${_value}" "${MANDATORY}" \
    || areEqual "${_value}" "MANDATORY"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Checks whether given flag expects an argument.
## -> 1: The flag key.
## <- 0/${TRUE} if the flag expects an argument; 1/${FALSE} otherwise.
## Example:
##   if CLI.doesCommandLineFlagExpectArgument ${flagKey}"; then
##     echo "${flagKey} expects an argument";
##   fi
function CLI.doesCommandLineFlagExpectArgument() {
  local _flagKey="${1}";
  local -i _rescode;

  checkNotEmpty "flagKey" "${_flagKey}" 1;

  _value="${__DW_CLI_FLAG_EXPECTING_ARGUMENTS[${_flagKey}]}";

  if     isEmpty "${_value}" \
      || isTrue "${_value}" \
      || areEqual "${_value}" "${EXPECTS_ARGUMENT}" \
      || areEqual "${_value}" "EXPECTS_ARGUMENT"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Retrieves the description of given command-line parameter.
## -> 1: The name.
## <- 0/${TRUE} if the description was found; 1/${FALSE} otherwise.
## <- RESULT: The description.
## Example:
##   if CLI.retrieveCommandLineParameterDescriptionFromName "project"; then
##     echo "Description: ${RESULT}";
##   fi
function CLI.retrieveCommandLineParameterDescriptionFromName() {
  local _name="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  _result="${__DW_CLI_PARAMETER_DESCRIPTIONS[${_name}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Checks whether given parameter is mandatory or not.
## -> 1: The parameter name.
## <- 0/${TRUE} if the parameter is mandatory; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineParameterMandatory "file"; then
##     echo "file is mandatory";
##   fi
function CLI.isCommandLineParameterMandatory() {
  local _name="${1}";
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  _value="${__DW_CLI_MANDATORY_PARAMETERS[${_name}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "MANDATORY"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Checks whether given parameter is single or not.
## -> 1: The parameter name.
## <- 0/${TRUE} if the parameter only expects a single value; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineParameterSingle "file"; then
##     echo "file accepts only one value";
##   fi
function CLI.isCommandLineParameterSingle() {
  local _name="${1}";
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  _value="${__DW_CLI_SINGLE_PARAMETERS[${_name}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "SINGLE"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Checks whether given parameter is multiple or not.
## -> 1: The parameter name.
## <- 0/${TRUE} if the parameter allows multiple values; 1/${FALSE} otherwise.
## Example:
##   if CLI.isCommandLineParameterMultiple "file"; then
##     echo "file can accept multiple values";
##   fi
function CLI.isCommandLineParameterMultiple() {
  local _name="${1}";
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  if CLI.isCommandLineParameterSingle "${_name}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## Prints a line describing how to run the script.
## <- 0/${TRUE} if this function printed anything; 1/${FALSE} otherwise.
function CLI.commandLineFlagsUsage() {
  local -i _rescode=${TRUE};
  local _message="${SCRIPT_NAME}";
  local _flagKey;
  local _shortName;
  local _longName;
  local _oldIFS="${IFS}";
  local _mandatory;
  IFS=$' \t\n';

  for _flagKey in ${__DW_CLI_FLAG_KEYS[@]}; do
    IFS="${_oldIFS}";
    CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
    _shortName="${RESULT}";
    CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
    _longName="${RESULT}";
    _message="${_message} ";
    CLI.isCommandLineFlagMandatory "${_flagKey}";
    _mandatory=$?;
    if isFalse ${_mandatory}; then
      _message="${_message}[";
    fi
    _message="${_message}-${_shortName}|--${_longName}";
    if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
      _message="${_message} arg";
    fi
    if isFalse ${_mandatory}; then
      _message="${_message}]";
    fi
  done
  IFS="${_oldIFS}";

  echo -n "${_message}";

  return ${_rescode};
}

## Conditionally prints (to stdout) a line with the script description.
## <- 0/${TRUE} if this function printed anything; 1/${FALSE} otherwise.
function CLI.scriptDescriptionUsage() {
  local -i _rescode;
  if isEmpty "${__DW_CLI_SCRIPT_DESCRIPTION}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -e "\n${__DW_CLI_SCRIPT_DESCRIPTION}\n";
  fi

  return ${_rescode};
}

## Conditionally prints (to stdout) a line with the license summary.
## <- 0/${TRUE} if this function printed anything; 1/${FALSE} otherwise.
function CLI.scriptLicenseSummaryUsage() {
  local -i _rescode;
  if isEmpty "${__DW_CLI_SCRIPT_LICENSE_SUMMARY}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
    echo "${__DW_CLI_SCRIPT_LICENSE_SUMMARY}";
  fi

  return ${_rescode};
}

## Conditionally prints (to stdout) a line with the copyright.
## <- 0/${TRUE} if this function printed anything; 1/${FALSE} otherwise.
function CLI.scriptCopyrightUsage() {
  local -i _rescode;

  if isEmpty "${__DW_CLI_SCRIPT_COPYRIGHT}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo "${__DW_CLI_SCRIPT_COPYRIGHT}";
  fi

  return ${_rescode};
}

## Prints a line describing the details of the command-line flags.
## <- 0/${TRUE} if this function printed anything; 1/${FALSE} otherwise.
function CLI.commandLineFlagsDetailedUsage() {
  local -i _rescode;
  local _message;
  local _flagKey;
  local _shortName;
  local _longName;
  local _description;
  local _oldIFS="${IFS}";
  IFS=$' \t\n';

  for _flagKey in ${__DW_CLI_FLAG_KEYS[@]}; do
    IFS="${_oldIFS}";
    CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
    _shortName="${RESULT}";
    CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
    _longName="${RESULT}";
    CLI.retrieveCommandLineFlagDescriptionFromKey "${_flagKey}";
    _description="${RESULT}";
    _message="${_message}  * -${_shortName}|--${_longName}";
    if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
      _message="${_message} arg";
    fi
    _message="${_message}: ${_description}.";
    if CLI.isCommandLineFlagMandatory "${_flagKey}"; then
      _message="${_message} Mandatory.\n";
    else
      _message="${_message} Optional.\n";
    fi
  done
  IFS="${_oldIFS}";

  if isEmpty "${_message}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -n -e "${_message}";
  fi

  return ${_rescode};
}

## Declares the script expects another command-line parameter.
## -> 1: The parameter name.
## -> 2: The parameter description.
## -> 3: MANDATORY if the parameter is mandatory; OPTIONAL otherwise.
## -> 4: SINGLE if the parameter can not be repeated; MULTIPLE otherwise.
## <- 0/${TRUE} if the parameter was added successfully; 1/${FALSE} otherwise.
## Example:
##   addCommandLineParameter "project" "The project to process" MANDATORY SINGLE;
function addCommandLineParameter() {
  local _name="${1}";
  local _description="${2}";
  local _mandatoryOrOptional="${3}";
  local _singleOrMultiple="${4}";

  checkNotEmpty "name" "${_name}" 1;
  checkNotEmpty "description" "${_description}" 2;
  checkOneOf "mandatory/optional" "${_mandatoryOrOptional}" "MANDATORY OPTIONAL" 3;
  checkOneOf "single/multiple" "${_singleOrMultiple}" "SINGLE MULTIPLE" 4;

  if    isEmpty "${__DW_CLI_PARAMETER_NAMES[*]}" \
     || arrayDoesNotContain "${__DW_CLI_PARAMETER_NAMES[*]}" "${_name}"; then
    __DW_CLI_PARAMETER_NAMES[${#__DW_CLI_PARAMETER_NAMES[@]}]="${_name}";
    __DW_CLI_PARAMETER_DESCRIPTIONS["${_name}"]="${_description}";
    __DW_CLI_MANDATORY_PARAMETERS["${_name}"]="${_mandatoryOrOptional}";
    __DW_CLI_SINGLE_PARAMETERS["${_name}"]="${_singleOrMultiple}";
  fi

  return ${TRUE};
}

## Checks whether given parameter is single or not.
## -> 1: The parameter name.
## <- 0/${TRUE} if the parameter is single; 1/${FALSE} otherwise.
## Example:
##   if CLI.commandLineParameterIsSingle ${name}"; then
##     echo "${name} is multiple";
##   fi
function CLI.commandLineParameterIsSingle() {
  local _name="${1}";
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  _value="${__DW_CLI_SINGLE_PARAMETERS[${_name}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "SINGLE"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Checks whether given parameter is multiple or not.
## -> 1: The parameter name.
## <- 0/${TRUE} if the parameter is multiple; 1/${FALSE} otherwise.
## Example:
##   if CLI.commandLineParameterIsMultiple ${name}"; then
##     echo "${name} is multiple";
##   fi
function CLI.commandLineParameterIsMultiple() {
  local _name="${1}";
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  if CLI.commandLineParameterIsSingle "${_name}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## Checks whether given parameter is mandatory or not.
## -> 1: The parameter name.
## <- 0/${TRUE} if the parameter is mandatory; 1/${FALSE} otherwise.
## Example:
##   if CLI.commandLineParameterIsMandatory ${name}"; then
##     echo "${name} is mandatory";
##   fi
function CLI.commandLineParameterIsMandatory() {
  local _name="${1}";
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  _value="${__DW_CLI_MANDATORY_PARAMETERS[${_name}]}";

  if    isEmpty "${_value}" \
      || isTrue "${_value}" \
      || areEqual "${_value}" "MANDATORY"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Prints a line describing the script's flags.
## <- 0/${TRUE} if this function printed anything; 1/${FALSE} otherwise.
function CLI.commandLineParametersUsage() {
  local -i _rescode;
  local _message;
  local _name;
  local _oldIFS="${IFS}";
  local _mandatory;
  IFS=$' \t\n';

  for _name in ${__DW_CLI_PARAMETER_NAMES[@]}; do
    IFS="${_oldIFS}";
    _message="${_message} ${_name}";
    if CLI.commandLineParameterIsMultiple "${_name}"; then
      if CLI.isCommandLineParameterMandatory "${_name}"; then
        _message="${_message}+";
      else
        _message="${_message}*";
      fi
    fi
  done
  IFS="${_oldIFS}";

  if isEmpty "${_message}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -e "${_message}";
  fi

  return ${_rescode};
}

## Prints a line describing the details of the command-line parameters.
## <- 0/${TRUE} if this function printed anything; 1/${FALSE} otherwise.
function CLI.commandLineParametersDetailedUsage() {
  local -i _rescode;
  local _message;
  local _name;
  local _description;
  local _oldIFS="${IFS}";
  IFS=$' \t\n';

  for _name in ${__DW_CLI_PARAMETER_NAMES[@]}; do
    IFS="${_oldIFS}";
    if isNotEmpty "${_message}"; then
      _message="\n";
    fi
    CLI.retrieveCommandLineParameterDescriptionFromName "${_name}";
    _description="${RESULT}";
    _message="${_message}  * ${_name}";
    if CLI.commandLineParameterIsMultiple "${_name}"; then
      _message="${_message}*";
    fi
    _message="${_message}: ${_description}.";
    if CLI.commandLineParameterIsMandatory "${_name}"; then
      _message="${_message} Mandatory.";
    else
      _message="${_message} Optional.";
    fi
  done
  IFS="${_oldIFS}";

  if isEmpty "${_message}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -e "${_message}";
  fi

  return ${_rescode};
}


## Sets the script copyright message.
## -> 1: The copyright message.
## <- 0/${TRUE} always.
## Example:
##   setScriptCopyrightMessage "2018-today Acme Inc.";
function setScriptCopyright() {
  local _copyright="${1}";

  checkNotEmpty "copyright" "${_copyright}" 1;

  __DW_CLI_SCRIPT_COPYRIGHT="${_copyright}";

  return ${TRUE};
}

## Sets the script license summary.
## -> 1: The license message.
## <- 0/${TRUE} always.
## Example:
##   setScriptLicenseSummary "Distributed this under the GNU General Public License v3.";
function setScriptLicenseSummary() {
  local _license="${1}";

  checkNotEmpty "license" "${_license}" 1;

  __DW_CLI_SCRIPT_LICENSE_SUMMARY="${_license}";

  return ${TRUE};
}

## Defines the script description.
## -> 1: The description.
## <- 0/${TRUE} in any case.
## Example:
##   setScriptDescription "This script calculates fibonacci sequence items"
function setScriptDescription() {
  local _description="${1}";

  checkNotEmpty "description" "${_description}" 1;

  __DW_CLI_SCRIPT_DESCRIPTION="${_description}";
}

## Prints the usage description.
function usage() {
  CLI.commandLineFlagsUsage
  if ! CLI.commandLineParametersUsage; then
    echo;
  fi
  CLI.scriptCopyrightUsage
  CLI.scriptLicenseSummaryUsage;
  if ! CLI.scriptDescriptionUsage; then
    echo;
  fi
  echo "Where:"
  CLI.commandLineFlagsDetailedUsage
  CLI.commandLineParametersDetailedUsage
}

## Callback function when the user includes the debug (-v|--debug) flag.
## It's based on a naming convention: dw_parse_[flag]_cli_flag
function dw_parse_debug_cli_flag() {
  setDebugEnabled;
}

## Callback function when the user includes the trace (-vv|--trace) flag.
## It's based on a naming convention: dw_parse_[flag]_cli_flag
function dw_parse_trace_cli_flag() {
  setTraceEnabled;
}

## Callback function when the user includes the quiet (-q|--quiet) flag.
## It's based on a naming convention: dw_parse_[flag]_cli_flag
function dw_parse_quiet_cli_flag() {
  export QUIET=${TRUE};
}

## Callback function when the user includes the help (-h|--help) flag.
## It's based on a naming convention: dw_check_[flag]_cli_flag
function dw_parse_help_cli_flag() {
  printHelp;
}

## Sets up the default state.
function CLI.defaultState() {
  ## Built-in flags.
  addCommandLineFlag "debug" "v" "Display debug messages" OPTIONAL NO_ARGUMENT;
  addCommandLineFlag "trace" "vv" "Display trace messages" OPTIONAL NO_ARGUMENT;
  addCommandLineFlag "quiet" "q" "Be silent" OPTIONAL NO_ARGUMENT;
  addCommandLineFlag "help" "h" "Display information about how to use the script" OPTIONAL NO_ARGUMENT;
}

function CLI.resetState() {
  __DW_CLI_FLAG_KEYS=();
  clearAssociativeArray __DW_CLI_FLAG_LONG_NAMES;
  clearAssociativeArray __DW_CLI_FLAG_SHORT_NAMES;
  clearAssociativeArray __DW_CLI_MANDATORY_FLAGS;
  clearAssociativeArray __DW_CLI_FLAG_EXPECTING_ARGUMENTS;
  clearAssociativeArray __DW_CLI_FLAG_DESCRIPTIONS;
  __DW_CLI_PARAMETER_NAMES=();
  clearAssociativeArray __DW_CLI_PARAMETER_DESCRIPTIONS;
  clearAssociativeArray __DW_CLI_MANDATORY_PARAMETERS;
  clearAssociativeArray __DW_CLI_SINGLE_PARAMETERS;
  __DW_CLI_SCRIPT_DESCRIPTION="";
  __DW_CLI_SCRIPT_COPYRIGHT="";
  __DW_CLI_SCRIPT_LICENSE_SUMMARY="";
}

declare -ag __DW_CLI_FLAG_KEYS;
declare -Ag __DW_CLI_FLAG_LONG_NAMES;
declare -Ag __DW_CLI_FLAG_SHORT_NAMES;
declare -Ag __DW_CLI_MANDATORY_FLAGS;
declare -Ag __DW_CLI_FLAG_EXPECTING_ARGUMENTS;
declare -Ag __DW_CLI_FLAG_DESCRIPTIONS;
declare -ag __DW_CLI_PARAMETER_NAMES;
declare -Ag __DW_CLI_PARAMETER_DESCRIPTIONS;
declare -Ag __DW_CLI_MANDATORY_PARAMETERS;
declare -Ag __DW_CLI_SINGLE_PARAMETERS;
declare -g __DW_CLI_SCRIPT_DESCRIPTION;
declare -g __DW_CLI_SCRIPT_COPYRIGHT;
declare -g __DW_CLI_SCRIPT_LICENSE_SUMMARY;

CLI.resetState;
CLI.defaultState;

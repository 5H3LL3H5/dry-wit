# mod: locale/02_change_default_locale
# api: public
# txt: Changes the system's default locale.

# fun: is_locale_supported
# api: public
# txt: Checks if given locale identifier is supported.
# opt: locale: The locale identifier.
# txt: Returns 0/TRUE if the locale is supported; 1/FALSE otherwise.
# use: if is_locale_supported "en_US" "UTF-8"; then echo "en_US with UTF-8 is supported"; fi
function is_locale_supported() {
  local _locale="${1}";
  local _encoding="${2}";
  local -i _rescode;

  checkNotEmpty "locale" "${_locale}" 1;
  checkNotEmpty "encoding" "${_encoding}" 2;

  if [ -f ${SUPPORTED_LOCALES_FOLDER}/${_locale%%_*} ]; then
      if is_locale_file_available "${_locale}"; then
          if is_locale_available_in_language_file "${_locale}" "${_encoding}"; then
              _rescode=${TRUE};
          else
            _rescode=${FALSE};
          fi
      else
        _rescode=${FALSE};
      fi
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: is_locale_file_available
# api: public
# txt: Checks if the locale file is available.
# opt: locale: The locale.
# txt: Returns 0/TRUE if the locale file exists; 1/FALSE otherwise.
# use: if is_locale_file_available "en_US"; then echo "English-US is available"; fi
function is_locale_file_available() {
  local _locale="${1}";
  local -i _rescode;

  checkNotEmpty "locale" "${_locale}" 1;

  if [ -f ${AVAILABLE_LOCALES_FOLDER}/${_locale} ]; then
      _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: locale_requires_encoding_suffix
# api: public
# txt: Checks if locale requires appending the encoding or not.
# opt: locale: the locale.
# opt enocding: the encoding.
# txt: Returns 0/TRUE if the locale requires the encoding suffix; 1/FALSE otherwise.
# use: if locale_requires_encoding_suffix "${locale}" "${encoding}"; then locale Definition="${locale}.${encoding}"; fi
function locale_requires_encoding_suffix() {
  local _locale="${1}";
  local _encoding="${2}";
  local -i _rescode;

  checkNotEmpty "locale" "${_locale}" 1;
  checkNotEmpty "encoding" "${_encoding}" 2;

  grep "${_locale}.${_encoding} ${_encoding}" "${SUPPORTED_LOCALES_FILE}" > /dev/null 2>&1;
  _rescode=$?;

  return ${_rescode};
}

# fun is_locale_available_in_language_file
# api: public
# txt: Checks if given locale + encoding is supported.
# opt: locale: The locale.
# opt: encoding: The encoding.
# txt: Returns 0/TRUE if the language is supported; 1/FALSE otherwise.
# txt: The variable RESULT contains the supported locales if the funcion returns 0/TRUE.
# use: if is_locale_available_in_language_file "en_US" "UTF-8"; then echo "Supported English locales: ${RESULT}"; fi
function is_locale_available_in_language_file() {
  local _locale="$1";
  local _encoding="$2";
  local -i _rescode;
  local _language;

  checkNotEmpty "locale" "${_locale}" 1;
  checkNotEmpty "encoding" "${_encoding}" 2;

  if is_locale_file_available "${_locale}"; then
      if locale_requires_encoding_suffix "${_locale}" "${_encoding}"; then
          _rescode=${TRUE}; # Implicit since it greps the same file.
      else
        grep "${_locale} ${_encoding}" ${SUPPORTED_LOCALES_FILE} > /dev/null 2>&1;
        _rescode=$?;
      fi
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: change_default_locale
# api: public
# txt: Changes the default locale.
# opt: locale: The locale.
# txt: Returns 0/TRUE always.
# use: change_default_locale "en_US.UTF-8";
function change_default_locale() {
  local _locale="${1}";
  local _encoding="${2}";

  checkNotEmpty "locale" "${_locale}" 1;
  checkNotEmpty "encoding" "${_encoding}" 2;

  logInfo -n "Checking if the ${_locale}/${_encoding} pair is valid";
  if is_locale_supported "${_locale}" "${_encoding}"; then
      logInfoResult SUCCESS "valid";
      logInfo -n "Modifying ${DEFAULT_LOCALE_FILE}";
      echo "LANG=\"${_locale}.${_encoding}\"" > ${DEFAULT_LOCALE_FILE};
      echo "LANGUAGE=\"${_locale}.${_encoding}\"" >> ${DEFAULT_LOCALE_FILE};
      echo "LC_ALL=\"${_locale}.${_encoding}\"" >> ${DEFAULT_LOCALE_FILE};
      logInfoResult SUCCESS "done";

      logInfo -n "Modifying ${BASHLOCALE_FILE}";
      echo "# Generated by ${SCRIPT_NAME} for locale ${_locale}.${_encoding}" > ${BASH_LOCALE_FILE};
      echo "export LANG=\"${_locale}.${_encoding}\"" >> ${BASH_LOCALE_FILE};
      echo "export LANGUAGE=\"${_locale}.${_encoding}\"" >> ${BASH_LOCALE_FILE};
      echo "export LC_ALL=\"${_locale}.${_encoding}\"" >> ${BASH_LOCALE_FILE};
      #  echo "export LC_CTYPE=\"${_locale}.${_encoding}\"" >> ${BASH_LOCALE_FILE};
      logInfoResult SUCCESS "done";
  else
    logInfoResult FAILURE "invalid";
    exitWithErrorCode LOCALE_ENCODING_PAIR_IS_NOT_SUPPORTED "${_locale}" "${_encoding}";
  fi
}

addError "LOCALE_ENCODING_PAIR_IS_NOT_SUPPORTED" "The provided locale-encoding pair is not supported";

# env: DEFAULT_LOCALE_FILE: The /etc/default/locale file
defineEnvVar DEFAULT_LOCALE_FILE MANDATORY "The /etc/default/locale file" "/etc/default/locale";

# env: BASH_LOCALE_FILE: The /etc/bash.locale file
defineEnvVar BASH_LOCALE_FILE MANDATORY "The /etc/bash.locale file" "/etc/bash.locale";
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet

# mod: dw-plumbing

# IFS stuff
#_OLD_IFS="${IFS}";
#export IFS=$'\n\t\040';

declare -gx MANDATORY=${TRUE};
declare -gx OPTIONAL=${FALSE};

# txt: Performs the checks for a required dependency.
# fun: checkReq dependency errorCode?
# opt: dependency: The dependency.
# opt: errorCode: The error code, optional.
# api: checkReq
# use: checkReq jq
function checkReq() {
    local _dependency="${1}";
    local _errorCode="${2:-}";

    if [ -z "${_errorCode}" ]; then
        DRYWIT.addMissingDependencyError "${_dependency}";
        DRYWIT.checkDependency "${_dependency}";
    else
        DRYWIT.checkDependency "${_dependency}" "${_errorCode}";
    fi
}

# txt: Checks if given function is present.
# txt: Returns 0/TRUE if the function is found; 1/FALSE otherwise.
# fun: isFunctionPresent funcName scriptFile?
# opt: funcName: The function name.
# opt: scriptFile: The script file. Optional.
# api: isFunctionPresent
# use: if isFunctionPresent "myFunc" "myScript.sh"; then
# use:   echo "myFunc is defined in myScript.sh";
# use: fi
function isFunctionPresent() {
  local _function="${1}";
  local _script="${2}";
  local _rescode;
  local _inc;
  local _oldIFS="${IFS}";

  checkNotEmpty "function" "${_function}" 1;

  type ${_function} 2> /dev/null | grep -q 'function'
  _rescode=$?;
  if isFalse ${_rescode}; then
    if isNotEmpty "${_script}"; then
      grep " ${_function}()" "${_script}" > /dev/null 2>&1;
      _rescode=$?;
    fi
  fi
  if isFalse ${_rescode}; then
    if isNotEmpty "${_script}"; then
      IFS="${DWIFS}";
      for _inc in "./$(basename ${_script} .sh).inc.sh" \
                    "${DRY_WIT_SCRIPT_FOLDER}/$(basename ${_script} .sh).inc.sh"; do
        IFS="${_oldIFS}";
        if fileExists "${_inc}"; then
          isFunctionPresent "${_function}" "${_inc}";
          _rescode=$?;
	        if isTrue ${_rescode}; then
            break;
	        fi
        fi
      done
      IFS="${_oldIFS}";
    fi
  fi

  return ${_rescode};
}

# txt: Checks if given function is missing.
# txt: Returns 0/TRUE if the function is missing; 1/FALSE otherwise.
# fun: isFunctionMissing funcName scriptFile?
# opt: funcName: The function name.
# opt: scriptFile: The script file. Optional.
# api: isFunctionMissing
# use: if isFunctionMissing "myFunc" "myScript.sh"; then
# use:   echo "myFunc is not defined in myScript.sh";
# use: fi
function isFunctionMissing() {
  local _function="${1}";
  local _script="${2}";
  local -i _rescode;

  checkNotEmpty "function" "${_function}" 1;

  if isFunctionPresent "${_function}" "${_script}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# txt: Cleans up temporary resources.
# txt: Returns 0/TRUE always.
# fun: cleanup
# api: cleanup
# use: cleanup
function cleanup() {
  local -i _deletedCount=0;
  local -i _notDeletedCount=0;
  local _deleted;
  local _notDeleted;
  local -i _success;
  local _oldIFS="${IFS}";
  local _i;

  if [ "${#_CLEANUP_FILES}" != "0" ]; then
    setLogCategory "post-process";

    logTrace -n "Cleaning up temporary files";

    IFS="${DWIFS}";
    for _i in ${_CLEANUP_FILES[*]}; do
      IFS="${_oldIFS}";
      rm -rf ${_i} > /dev/null 2>&1;
      if isTrue $?; then
          _deleted="${_deleted} ${_i}";
          _deletedCount=$((_deletedCount + 1));
      else
        _notDeleted="${_notDeleted} ${_i}";
        _notDeletedCount=$((_notDeletedCount + 1));
      fi
    done
    IFS="${_oldIFS}";

    if isZero ${_notDeletedCount}; then
      _success=${TRUE};
    fi

    if isTrue ${_success}; then
      if isZero ${_deletedCount}; then
        logTraceResult SUCCESS "none";
      else
        logTraceResult SUCCESS "${_deletedCount}";
        logTrace "Deleted: ${_deleted}";
      fi
    elif isEmpty "${_notDeletedCount}"; then
      logTraceResult FAILURE "?";
    else
      logTraceResult FAILURE "${_notDeletedCount}";
    fi

    if isFalse ${_success}; then
      logTrace "Not deleted: ${_notDeleted}";
    fi
  fi
}

# txt: Performs some checks on the script itself.
# txt: Returns 0/TRUE always.
# fun: DRYWIT.checkScript script
# opt: script: The script.
# use: DRYWIT.checkScript /tmp/myScript.sh
function DRYWIT.checkScript() {
  local _script="${1}";
  local _v;
  local _f;
  local _oldIFS="${IFS}";

  checkNotEmpty "script" "${_script}" 1;

  setLogCategory "sanity-check";
  logTrace -n "Checking mandatory constants";

  IFS="${DWIFS}";
  for _v in ${ERROR_MESSAGES[@]}; do
    IFS="${_oldIFS}";
    if [ -z "${_v}" ]; then
      exitWithErrorCode MISSING_MANDATORY_VARIABLES ${_v};
    fi
  done
  IFS="${_oldIFS}";
  logTraceResult SUCCESS "done";
  logTrace -n "Checking mandatory functions";
  IFS="${DWIFS}";
  for _f in main; do
    IFS="${_oldIFS}";
    isFunctionPresent ${_f} ${_script};
    if isFalse $?; then
      exitWithErrorCode MISSING_MANDATORY_FUNCTIONS ${_f};
    fi
  done
  IFS="${_oldIFS}";
  logTraceResult SUCCESS "${_DW_DONE}";
}

# txt: Performs the dry-wit setup process.
# txt: Returns 0/TRUE always.
# fun: DRYWIT.setup
# use: DRYWIT.setup
function DRYWIT.setup() {
  DRYWIT.trapSignals;
  local _f;
  local _files;
  local _oldIFS="${IFS}";

  DRYWIT.retrieveSettingsFiles;
  _files="${RESULT}"

  IFS="${DWIFS}";
  for _f in ${_files}; do
    IFS="${_oldIFS}";
    sourceFileIfExists "${_f}";
  done
  IFS="${_oldIFS}";

  evalEnvVars;
}

# txt: Retrieves the settings files.
# txt: The variable RESULT contains a space-separated list of settings files.
# fun: DRYWIT.retrieveSettingsFiles
# use: DRYWIT.retrieveSettingsFiles;
# use: echo "settings files: ${RESULT}";
function DRYWIT.retrieveSettingsFiles() {
  local _f;
  local _d;
  local _result="";
  local _oldIFS="${IFS}";

  local -A _doneAlready=();

  IFS="${DWIFS}";
  for _f in "$(basename ${DRY_WIT_SCRIPT_PATH} .sh).inc.sh" ".$(basename ${DRY_WIT_SCRIPT_PATH} .sh).inc.sh"; do
    for _d in "${DRY_WIT_SCRIPT_FOLDER}" "."; do
      IFS="${_oldIFS}";
      retrieveAbsolutePath "${_d}/${_f}";
      if [ -e "${RESULT}" ] && [ "${_doneAlready[${RESULT}]}" != "${TRUE}" ]; then
        _result="${_result} ${RESULT}";
        _doneAlready["${RESULT}"]=${TRUE};
      fi
    done
  done
  IFS="${_oldIFS}";

  export RESULT="${_result}";
}

# txt: dry-wit's core process.
# txt: Returns 0/TRUE always.
# fun: DRYWIT.main script
# opt: script: The script to run.
# use: DRYWIT.main
function DRYWIT.main() {
  local _script="${1#./}";
  shift;

  local _absolutePath;
  retrieveAbsolutePath "${DRY_WIT_SCRIPT_PATH}";
  _absolutePath="${RESULT}";

  source "${DRY_WIT_SCRIPT_PATH}" $@;

  DRYWIT.defineDryWitErrorMessages;

  DRYWIT.setup "${_script}";

  if isFunctionPresent defineErrors "${_script}"; then
    defineErrors;
  fi

  if isFunctionPresent defineEnvDefaults "${_script}"; then
    defineEnvDefaults;
  fi

  if isFunctionPresent defineEnv "${_script}"; then
    defineEnv;
  fi

  if isFunctionPresent defineKeywords "${_script}"; then
    defineKeywords;
  fi

  if isFunctionPresent parseInput "${_script}"; then
      evalEnvVars;
      parseInput $@;
  fi

  DRYWIT.checkScript "${_script}";

  DRYWIT.defineDryWitRequirements;

  if isFunctionPresent checkRequirements "${_script}"; then
    logTrace -n "Checking declared requirements";
    checkRequirements;
    logTraceResult SUCCESS "${_DW_DONE}";
  fi

  if isFunctionPresent checkInput "${_script}"; then
      evalEnvVars;
      checkInput $@;

      if isFunctionPresent postCheckInput "${_script}"; then
          postCheckInput $@;
      fi
  fi

  setLogCategory "main";
  main;
}

# txt: Appends a new built-in error to BUILTIN_ERRORS.
# txt: Returns 0/TRUE always.
# fun: DRYWIT.appendBuiltInError error
# opt: error: The error to add.
# use: DRYWIT.appendBuiltInError "error";
function DRYWIT.appendBuiltInError() {
  local _error="${1}";

  if declare -p BUILTIN_ERRORS > /dev/null 2>&1; then
    upvars -a$((${#BUILTIN_ERRORS[@]}+1)) BUILTIN_ERRORS "${BUILTIN_ERRORS[@]}" "${_error}";
    export BUILTIN_ERRORS;
  else
    export -a BUILTIN_ERRORS=();
    upvars -a1 BUILTIN_ERRORS "${_error}";
  fi
}

# txt: Annotates a new built-in error.
# txt: Returns 0/TRUE always.
# fun: DRYWIT.addBuiltInError name message
# opt: name: The error name.
# opt: message: The error message.
# use: DRYWIT.addBuiltInError INVALID_OPTION "Option unrecognized"
function DRYWIT.addBuiltInError() {
  local _errorName="${1}";
  local _message="${2}";
  toUpper "${_errorName}";
  local _upcasedErrorName="${RESULT}";

  DRYWIT.appendBuiltInError "${_upcasedErrorName}";
  upvar "${_upcasedErrorName}" "${_message}";
  export "${_upcasedErrorName}"="${_message}";
}

# txt: Declares dry-wit's error messages.
# txt: Returns 0/TRUE always.
# fun: DRYWIT.defineDryWitErrorMessages
# use: DRYWIT.defineDryWitErrorMessages
function DRYWIT.defineDryWitErrorMessages() {
  DRYWIT.addBuiltInError "SCRIPT_INTERRUPTED" "User interruption";
  DRYWIT.addBuiltInError "MISSING_MANDATORY_VARIABLES" "Script not complete, since it doesn't define all mandatory variables";
  DRYWIT.addBuiltInError "MISSING_MANDATORY_FUNCTIONS" "Script not complete, since it doesn't define all mandatory functions";
  DRYWIT.addBuiltInError "UNKNOWN_ERROR" "The script has finished due to an unexpected error";
  DRYWIT.addBuiltInError "UNACCEPTABLE_API_CALL" "Unacceptable call to dry-wit API: ";
  DRYWIT.addBuiltInError "POSTCONDITION_NOT_SATISFIED" "Postcondition not satisfied: ";
  DRYWIT.addBuiltInError "UNACCEPTABLE_ENVIRONMENT_VARIABLE" "Unacceptable environment variable: ";
}

# txt: Annotates a new error describing a missing dependency.
# txt: Returns 0/TRUE always.
# fun: DRYWIT.addMissingDependencyError dependency
# opt: message: The the missing dependency.
# use: DRYWIT.addMissingDependencyError "docker"
function DRYWIT.addMissingDependencyError() {
  local _dependency="${1}";
  normalizeUppercase "${_dependency}_NOT_INSTALLED";
  local _constant="${RESULT}";

  debugEcho "addError ${_constant} \"${_dependency}\" is not installed\"";
  addError "${_constant}" "${_dependency} is not installed";
}

# txt: Checks a required dependency is available.
# txt: Returns 0/TRUE always; it exits if the dependency is not available.
# fun: DRYWIT.checkDependency name errorCode
# opt: name: The program name.
# opt: errorCode: The error code to throw if the dependency is not available. Optional.
# use: DRYWIT.checkDependency jq JQ_IS_NOT_INSTALLED
function DRYWIT.checkDependency() {
  local _req="${1}";
  local _errorCode="${2}";

  if isEmpty "${_errorCode}"; then
    normalizeUppercase "${_req}_NOT_INSTALLED";
    _errorCode="${RESULT}";
  fi

  which ${_req} > /dev/null 2>&1;
  rescode=$?;
  if isFalse ${rescode}; then
      exitWithErrorCode ${_errorCode};
  fi
}

# txt: Checks dry-wit's own requirements.
# txt: Returns 0/TRUE always, unless it finds missing requirements and exits.
# fun: DRYWIT.defineDryWitRequirements
# use: DRYWIT.defineDryWitRequirements
function DRYWIT.defineDryWitRequirements() {
  checkReq grep;
  checkReq mktemp;
}

# txt: Traps required signals
# txt: Returns 0/TRUE always.
# fun: DRYWIT.trapSignals
# use: DRYWIT.trapSignals
function DRYWIT.trapSignals() {
  trap 'exitWithErrorCode SCRIPT_INTERRUPTED' INT QUIT TSTP;
  #  trap 'exitWithErrorCode UNKNOWN_ERROR " ${FUNCNAME[0]}"' ERR;
}
#

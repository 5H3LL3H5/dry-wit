# mod: user
# api: dry-wit
# txt: Functions related to user and groups.

DW.import logging;

# fun: addUserToGroup userName groupName
# api: dry-wit
# txt: Adds given user to a group.
# opt: userName: The user name.
# opt: groupName: The group name.
# txt: Returns 0/TRUE if the user gets added to the group successfully; 1/FALSE otherwise.
# use: if addUserToGroup guest users; then
#        echo "User guest added to group users";
#      fi
function addUserToGroup() {
    local _user="${1}";
    local _group="${2}";
    local rescode;

    gpasswd -a ${_user} ${_group} > /dev/null;
    rescode=$?;

    return ${rescode};
}

# fun: createGroup groupName groupId?
# api: dry-wit
# txt: Creates a new group.
# opt: groupName: The group name.
# opt: groupId: The group id. Optional.
# txt: Returns 0/TRUE if the group gets created successfully; 1/FALSE otherwise.
# use: if createGroup "fakegroup"; then
#        echo "fakegroup created successfully";
#      fi
function createGroup() {
    local _groupName="${1}";
    checkNotEmpty "group" "${_groupName}" 1;
    local _gid="${2}";

    local rescode;

    logDebug -n "Creating group ${_groupName}";

    if isEmpty "${_gid}"; then
        groupadd "${_groupName}";
        rescode=$?;
    else
        groupadd -g "${_gid}" "${_groupName}";
        rescode=$?;
    fi
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "done";
    else
        logDebugResult FAILURE "failed";
    fi

    return ${rescode};
}

# fun: createUser userName
# api: dry-wit
# txt: Creates a new user.
# opt: userName: The user name.
# txt: Returns 0/TRUE if the user gets created successfully; 1/FALSE otherwise.
# use: if createUser "fakeuser"; then
#        echo "fakeuser created successfully";
#      fi
function createUser() {
    local _userName="${1}";
    checkNotEmpty "userName" "${_userName}" 1;
    local rescode;

    logDebug -n "Creating user ${_userName}";

    useradd -M -N -l "${_userName}";
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "done";
    else
        logDebugResult FAILURE "failed";
    fi

    return ${rescode};
}

# fun: deleteGroup groupName
# api: dry-wit
# txt: Deletes given group.
# opt: groupName: The group name.
# txt: Returns 0/TRUE if the group is removed successfully; 1/FALSE otherwise.
# use: if deleteGroup "fakegroup"; then
#        echo "fakegroup deleted successfully";
#      afi
function deleteGroup() {
    local _groupName="${1}";
    checkNotEmpty "group" "${_groupName}" 1;
    local rescode;

    logDebug -n "Deleting group ${_groupName}";

    groupdel "${_groupName}";
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "done";
    else
        logDebugResult FAILURE "failed";
    fi

    return ${rescode};
}

# fun: deleteUser userName
# api: dry-wit
# txt: Deletes given user.
# opt: userName: The user name.
# txt: Returns 0/TRUE if the user is removed successfully; 1/FALSE otherwise.
# use: if deleteUser "fakeuser"; then
#        echo "fakeuser deleted successfully";
#      fi
function deleteUser() {
    local _userName="${1}";
    checkNotEmpty "user" "${_userName}" 1;
    local rescode;

    logDebug -n "Deleting user ${_userName}";

    userdel "${_userName}";
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "done";
    else
        logDebugResult FAILURE "failed";
    fi

    return ${rescode};
}

# fun: gidAlreadyExists gid
# api: dry-wit
# txt: Checks whether given gid already exists.
# opt: gid: The group id.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if gidAlreadyExists 103; then ...; fi
function gidAlreadyExists() {
    local _gid="${1}";
    local -i rescode;

    logDebug -n "Checking if gid ${_gid} already exists";
    getent group ${_gid} > /dev/null;
    rescode=$?;

    if isTrue ${rescode}; then
        logDebugResult SUCCESS "true";
    else
        logDebugResult FAILURE "false";
    fi

    return ${rescode};
}

# fun: groupAlreadyExists group
# api: dry-wit
# txt: Checks whether given group already exists.
# opt: group: The group name.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if groupAlreadyExists users; then ...; fi
function groupAlreadyExists() {
    local _group="${1}";
    local -i rescode;

    logDebug -n "Checking if group ${_group} already exists";
    getent group ${_group} > /dev/null;
    rescode=$?;

    if isTrue ${rescode}; then
        logDebugResult SUCCESS "true";
    else
        logDebugResult FAILURE "false";
    fi

    return ${rescode};
}

# fun: resolveCommandForUser userName command
# api: dry-wit
# txt: Resolves the path of a command for given user.
# opt: userName: The user.
# opt: command: The command.
# txt: Returns 0/TRUE if the command gets resolved to a path for given user; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the path of 'command' for given user.
# use: if resolveCommandForUser "${SERVICE_USER}" "gradle"; then
#        local _command="${RESULT}";
#      fi
function resolveCommandForUser() {
    local _user="${1}";
    checkNotEmpty "user" "${_user}" 1;
    local _command="${2}";
    checkNotEmpty "command" "${_command}" 2;
    local rescode;

    local result="$(su - ${_user} -c "which ${_command}" 2> /dev/null)";
    rescode=$?;
    if isTrue ${rescode}; then
        export RESULT="${result}";
    fi

    return ${rescode};
}

# fun: retrieveGidFromGroup group
# api: dry-wit
# txt: Retrieves the id of a given group.
# opt: group: The group name.
# txt: Returns 0/TRUE if the group was retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the group id.
# use: retrieveGidFromGroup "admin";
#      echo "The id of group admin is ${RESULT}";
function retrieveGidFromGroup() {
    local _group="${1}";
    checkNotEmpty "group" "${_group}" 1;

    local result;
    local rescode;

    logDebug -n "Retrieving gid of group ${_group}";
    result=$(getent group ${_group} | cut -d':' -f3);
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "${result}";
        export RESULT="${result}";
    else
        logDebugResult FAILURE "failed";
    fi

    return ${rescode};
}

# fun: retrieveGroupFromGid group
# api: dry-wit
# txt: Retrieves the group id of given group.
# opt: group: The group name.
# txt: Returns 0/TRUE if the gid is processed successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the group id.
# use: if retrieveGroupFromGid "100"; then echo "The name of group 1 is ${RESULT}"; fi
function retrieveGroupFromGid() {
    local _gid="${1}";
    local result;
    local -i rescode;

    checkNotEmpty "gid" "${_gid}" 1;

    result=$(getent group ${_gid} | cut -d':' -f1);
    rescode=$?;

    if isTrue ${rescode}; then
        export RESULT="${result}";
    fi

    return ${rescode};
}

# fun: retrieveOwnerGid path
# api: dry-wit
# txt: Retrieves the id of the owner group of given file or folder.
# opt: path: The file or folder.
# txt: Returns 0/TRUE if the owner information is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the id of the group that owns the file or folder.
# use: if retrieveOwnerGid /tmp; then echo "The id of the group of /tmp is ${RESULT}"; fi
function retrieveOwnerGid() {
    local _file="${1}"
    local -i _rescode;
    local result;

    result="$(stat -c '%g' "${_file}")";
    _rescode=$?;

    if isTrue ${_rescode}; then
        export RESULT="${result}";
    fi

    return ${_rescode};
}

# fun: retrieveOwnerUid path
# api: dry-wit
# txt: Retrieves the uid of the owner user of given file or folder.
# opt: path: The file or folder.
# txt: Returns 0/TRUE if the owner information is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the id of the user that owns the file or folder.
# use: if retrieveOwnerUid /tmp; then echo "The id of the owner of /tmp is ${RESULT}"; fi
function retrieveOwnerUid() {
    local _file="${1}"
    local -i _rescode;
    local result;

    result="$(stat -c '%u' "${_file}")";
    _rescode=$?;

    if isTrue ${_rescode}; then
        export RESULT="${result}";
    fi

    return ${_rescode};
}

# fun: retrieveUidFromUser user
# api: dry-wit
# txt: Retrieves the id of a given user.
# opt: user: The user name.
# txt: Returns 0/TRUE if the user is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the user id.
# use: if retrieveUidFromUser "root"; then "The id of user root is ${RESULT}"; fi
function retrieveUidFromUser() {
    local _user="${1}";
    checkNotEmpty "user" "${_user}" 1;
    local result;
    local -i rescode;

    logDebug -n "Retrieving uid of user ${_user}";
    result=$(getent passwd ${_user} | cut -d':' -f3);
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "${result}";
        export RESULT="${result}";
    else
        logDebugResult FAILURE "failed";
    fi

    return ${rescode};
}

# fun: retrieveUserFromUid user
# api: dry-wit
# txt: Retrieves the user id of given user.
# opt: user: The user name.
# txt: Returns 0/TRUE if the user is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the user id.
# use: if retrieveUserFromUid "1"; then echo "The name of user 1 is ${RESULT}"; fi
function retrieveUserFromUid() {
    local _uid="${1}";

    checkNotEmpty "uid" "${_uid}" 1;

    local result;
    local -i rescode;

    result=$(getent passwd ${_uid} | cut -d':' -f1);
    rescode=$?;

    if isTrue ${rescode}; then
        export RESULT="${result}";
    fi

    return ${rescode};
}

# fun: uidAlreadyExists uid
# api: dry-wit
# txt: Checks whether given uid already exists.
# opt: uid: The user id.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if uidAlreadyExists 1; then ...; fi
function uidAlreadyExists() {
    local _uid="${1}";
    local -i rescode;

    logDebug -n "Checking if uid ${_uid} is already used";
    getent passwd ${_uid} > /dev/null;
    rescode=$?;

    if isTrue ${rescode}; then
        logDebugResult SUCCESS "true";
    else
        logDebugResult FAILURE "false";
    fi

    return ${rescode};
}

# fun: updateGroupGid groupName gid
# api: dry-wit
# txt: Updates the gid of the group.
# opt: groupName: The group name.
# opt: gid: The group id.
# txt: Returns 0/TRUE if the group's gid is updated successfully; 1/FALSE otherwise.
# use: if updateGroupGid "guests" 103; then echo "guests' gid is now 103"; fi
function updateGroupGid() {
    local _group="${1}";
    local _gid="${2}";
    local rescode;

    logDebug -n "Changing ${_group}'s gid to ${_gid}";
    groupmod -g ${_gid} ${_group} > /dev/null 2>&1
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "done";
    else
        logDebugResult FAILURE "failed";
        groupmod -g ${_gid} ${_group} 2>&1
    fi

    return ${rescode};
}

# fun: updateUserGid userName gid
# api: dry-wit
# txt: Updates the gid of the user.
# opt: userName:: The user.
# opt: gid: The group id.
# txt: Returns 0/TRUE if the user's gid is updated successfully; 1/FALSE otherwise.
# use: if updateUserGid "guest" 103; then echo "Guest's gid is now 103"; fi
function updateUserGid() {
    local _user="${1}";
    checkNotEmpty "user" "${_user}" 1;

    local _gid="${2}";
    checkNotEmpty "gid" "${_gid}" 2;
    local rescode;

    logDebug -n "Changing ${_user}'s primary group to ${_gid}";
    usermod -g ${_gid} ${_user} > /dev/null 2>&1
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "done";
    else
        logDebugResult FAILURE "unneeded";
        usermod -g ${_gid} ${_user} 2>&1
    fi

    return ${rescode};
}

# fun: updateUserUid userName uid
# api: dry-wit
# txt: Updates the uid of the user.
# opt: userName: The user.
# opt: uid: The uid.
# txt: Returns 0/TRUE if the user's uid is updated successfully; 1/FALSE otherwise.
# use: if updateUserUid "guest" 1001; then "User guest's uid is now 1001"; fi
function updateUserUid() {
    local _user="${1}";
    checkNotEmpty "user" "${_user}" 1;

    local _uid="${2}";
    checkNotEmpty "uid" "${_uid}" 2;

    local rescode;

    logDebug -n "Changing ${_user}'s uid to ${_uid}";
    usermod -u ${_uid} ${_user} > /dev/null 2>&1
    rescode=$?;
    if isTrue ${rescode}; then
        logDebugResult SUCCESS "done";
    else
        logDebugResult FAILURE "failed";
        usermod -u ${_uid} ${_user} 2>&1
    fi

    return ${rescode};
}

# fun: userAlreadyExists user
# api: dry-wit
# txt: Checks whether given user already exists.
# opt: user: The user name.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if userAlreadyExists guest; then ...; fi
function userAlreadyExists() {
  local _user="${1}";
  local -i rescode;

  logDebug -n "Checking if user ${_user} is already used";
  getent passwd ${_user} > /dev/null;
  rescode=$?;

  if isTrue ${rescode}; then
    logDebugResult SUCCESS "true";
  else
    logDebugResult FAILURE "false";
  fi

  return ${rescode};
}
#

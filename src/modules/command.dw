DW.import user;
DW.import logging;

# Runs a command supporting logging of command-line and output.
# The output is stored in a single variable. If it's expected to
# be longer use 'runCommandLongOutput' instead.
# Parameters:
# - Command: The command to run.
function runCommand() {
  local _command="$(echo $@ | sed 's_\n_ _g')";
  local result;
  local resultCode;

  getLogCategory;
  local _previousLogCategory="${RESULT}";
  setLogCategory "${_previousLogCategory}:($1)";

  logDebug "${_command}";
  result=$($@ 2>&1);
  resultCode=$?;

  export RESULT="${result}";

  setLogCategory "${_previousLogCategory}";
  return ${resultCode};
}

# TODO: find out why this fails. result gets modified
# externally in the getLogCategory/setLogCategory/logDebug block
# Runs a command supporting logging of command-line and output,
# even if it's long, since it uses a temporary file to store it.
# Parameters:
# - Command: The command to run.
function runCommandLongOutput() {
  local _command="$(echo $@ | sed 's_\n_ _g')";
  local result;
  local resultCode;

  createTempFile;
  result="${RESULT}";

  getLogCategory;
  local _previousLogCategory="${RESULT}";
  setLogCategory "${_previousLogCategory}*";

  logDebug "${_command}";

  if isDebugEnabled; then
    $@ 2>&1 | tee "${result}";
    resultCode=${PIPESTATUS[0]};
  else
    $@ > "${result}" 2>&1;
    resultCode=$?;
  fi

  export RESULT="${result}";

  setLogCategory "${_previousLogCategory}";

  return ${resultCode};
}

## Runs the command in a folder, under a given user.
## -> 1: The user id.
## -> 2: The group id.
## -> 3: the folder.
## -> 4+: the command.
## Example:
##  if runCommandAsUidGid 1000 100 /tmp "ls -ltrhia"; then
##    echo "ls -ltrhia run successfully as uid 1000, gid 100, on /tmp";
##  fi
function runCommandAsUidGid() {
  local _uid="${1}";
  local _gid="${2}";
  local _folder="${3}";
  local _command="${4}";
  shift
  shift
  shift
  shift
  local _user;
  local _group;

  retrieveUserFromUid "${_uid}";
  _user="${RESULT}";
  retrieveGroupFromGid "${_gid}";
  _group="${RESULT}";

  runCommandAsUserAndGroup "${_user}" "${_group}" "${_folder}" "${_command}" ${@};
}

## Runs the command in a folder, under a given user.
## -> 1: The user.
## -> 2: The group.
## -> 3: the folder.
## -> 4+: the command.
## Example:
##  if runCommandAsUserAndGroup root root /tmp "ls -ltrhia"; then
##    echo "ls -ltrhia run successfully as root/root, on /tmp";
##  fi
function runCommandAsUserAndGroup() {
  local _user="${1}";
  local _group="${2}";
  local _folder="${3}";
  local _command="${4}";
  shift
  shift
  shift
  shift
  local _args="${@}";
  local _exports="$(export)";
  local -i rescode;
  local _line="${_command//$'\n'/ } ${_args//$'\n'/ }";
  createTempFile;
  local _runme="${RESULT}";

  checkNotEmpty "user" "${_user}" 1;
  checkNotEmpty "group" "${_group}" 2;
  checkNotEmpty "folder" "${_folder}" 3;
  checkNotEmpty "command" "${_command}" 4;


  createTempFile;
  _runme="${RESULT}";

  cat << EOF > "${_runme}"
#!/bin/bash

${_exports}
declare -x HOME="$(eval echo ~${_user})"
cd ${_folder}
${_line}
EOF
  chmod a+r "${_runme}"
  chmod a+x "${_runme}"

  logDebug "Running ${_command} ${_args} as ${_user}:${_group}";
  chown ${_user}:${_group} "${_runme}"
  exec 2>&1
  chpst -u ${_user}:${_group} "${_runme}";
  rescode=$?;

  return ${rescode};
}


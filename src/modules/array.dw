## Checks if an element is already contained in an array.
## -> 1: The array (passed as "${array[@]}".
## -> 2: The element to check.
## <- 0/${TRUE}: If the element is present in the array; 1/${FALSE} otherwise.
## Example:
##   a=("one" "two" "three" "other number")
##   if arrayContains "${array[@]}" "other number"; then
##     ...
##   fi
function arrayContains() {
  local _array="${1}";
  local _item="${2}";
  local _aux;
  local -i _rescode=${FALSE};
  local _oldIFS="${IFS}";

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## checkNotEmpty is loaded.
  DRYWIT.failsafeCheckNotEmpty "array" "${_array}" 1;
  DRYWIT.failsafeCheckNotEmpty "item" "${_item}" 2;

  IFS="${DWIFS}";
  for _aux in ${_array}; do
    IFS="${_oldIFS}";
    if areEqual "${_aux}" "${_item}"; then
      _rescode=${TRUE};
      break;
    fi
  done
  IFS="${_oldIFS}";

  return ${_rescode};
}

## Checks if an element is not already contained in an array.
## -> 1: The array (passed as "${array[@]}".
## -> 2: The element to check.
## <- 0/${TRUE}: If the element is not present in the array; 1/${FALSE}: Otherwise
## Example:
##   a=("one" "two" "three" "other number")
##   if arrayDoesNotContain "${array[@]}" "four"; then
##     ...
##   fi
function arrayDoesNotContain() {
  local _array="${1}";
  local _item="${2}";
  local -i _rescode=${FALSE};

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## checkNotEmpty is loaded.
  DRYWIT.failsafeCheckNotEmpty "array" "${_array}" 1;
  DRYWIT.failsafeCheckNotEmpty "item" "${_item}" 2;

  if arrayContains "${_array}" "${_item}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## PUBLIC
## Flattens an array, using given separator.
## -> 1: The name of the array variable.
## -> 2: The separator to use.
## <- RESULT: The resulting string.
## Example:
##   A=(a b c);
##   flattenArray A "x";
##   echo "A->${RESULT}" # axbxc
function flattenArray() {
  local _arrayName="${1}";
  local _separator="${2}";
  local result="";
  local _aux;
  local _len;
  local _oldIFS="${IFS}";
  local -i _i;

  checkNotEmpty "arrayName" "${_arrayName}" 1;

  _aux="$(echo "\${#${_arrayName}[@]}")";
  _len=$((-1+$(eval echo "${_aux}")));
  _oldIFS="${IFS}";

  IFS=$' \t\n';
  for _i in $(seq 0 ${_len}); do
    IFS="${_oldIFS}";
    _aux="$(echo "\${${_arrayName}[${_i}]}")";
    _item=$(eval echo "${_aux}");
    result="${result}${_separator}${_item}";
  done
  IFS="${_oldIFS}";

  result="${result#${_separator}}";

  export RESULT="${result}";
}

## Extracts the keys of given associate array.
## --> 1: The array name.
## <-- RESULT: the list of the keys, wrapped in double quotes.
## Example:
##   myMapping=([foo]=bar [with spaces]="with spaces");
##   retrieveAssociateArrayKeys myMapping;
##   for key in ${RESULT}; do
##     ..
##   done
function retrieveAssociateArrayKeys() {
  local _arrayName="${1}";
  local _key;
  local _result;

  checkNotEmpty "arrayName" "${_arrayName}" 1;

  declare -n _directArray="${_arrayName}";

  IFS=$' \t\n"';
  for _key in "${!_directArray[@]}"; do
    IFS="${_oldIFS}";
    if isNotEmpty "${_result}"; then
      _result="${_result} ";
    fi
    _result="${_result}\"${_key}\"";
  done
  IFS="${_oldIFS}";

  export RESULT="${_result}";
}

## Calls a given function for each entry found in given associative array.
## -> 1: The name of the associative array variable.
## -> 2: The name of the callback function.
## Example:
## function process_code() {
##   echo "Code: ${1}, description: ${2}";
## }
##   ..
##   forEachAssociativeArrayEntryDo "CODE_DESCRIPTION_MAPPING" "process_code";
function forEachAssociativeArrayEntryDo() {
  local _arrayName="${1}";
  local _callback="${2}";
  local _key;
  local _oldIFS="${IFS}";

  checkNotEmpty "arrayName" "${_arrayName}" 1;
  checkFunctionPresent "callback" "${_callback}" 2;

  declare -n _directArray="${_arrayName}";

  IFS=$' \t\n"';
  for _key in "${!_directArray[@]}"; do
    IFS="${_oldIFS}";
    ${_callback} "${_key}" "${_directArray[${_key}]}";
  done
  IFS="${_oldIFS}";
}

## Clears given associative array.
## -> 1: The associative array.
## Example:
##   clearAssociativeArray myArray;
function clearAssociativeArray() {
  local _arrayName="${1}";
  local _key;

  checkNotEmpty "arrayName" "${_arrayName}" 1;

  declare -n _directArray="${_arrayName}";

  IFS=$' \t\n"';
  for _key in "${!_directArray[@]}"; do
    IFS="${_oldIFS}";
    unset _directArray[${_key}];
  done
  IFS="${_oldIFS}";
}
#

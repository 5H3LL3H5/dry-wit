## Docker helpers
## Checks if given container exists.
## -> 1: The container name.
## <- 0/${TRUE} if the container exists; 0/${FALSE} otherwise.
## <- RESULT: The hash of the container.
## Example:
##   if dockerContainerExists "config"; then
##     echo "'config' container already exists (${RESULT})";
##   fi
function dockerContainerExists() {
  local _name="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  _result="$(docker ps -a --no-trunc --filter name=^/${_name}$ -q)";
  if isEmpty "${_result}"; then
      _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

## Retrieves the status of given container.
## -> 1: the container name.
## <- 0/${TRUE} if the container status could be obtained; 1/${FALSE} otherwise.
## <- RESULT: the status.
## Example:
##   if retrieveDockerContainerStatus mysql; then
##     echo "mysql's status is ${RESULT}";
##   fi
function retrieveDockerContainerStatus() {
  local _containerName="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "containerName" "${_containerName}" 1;

  ## Note: docker is a requirement of the caller script, not dry-wit.
  _result="$(docker inspect ${_containerName} -f {{json .State.Status}})";
  _rescode=$?;

  export RESULT="${_result}";

  return ${_rescode};
}

## Checks if a container is running.
## -> 1: the container name.
## <- 0/${TRUE} if the container is running; 1/${FALSE} otherwise.
## Example:
##   if isDockerContainerRunning mysql; then
##     echo "mysql is running";
##   fi
function isDockerContainerRunning() {
  local _containerName="${1}";
  local _status;
  local -i _rescode;

  checkNotEmpty "containerName" "${_containerName}" 1;

  ## Note: docker is a requirement of the caller script, not dry-wit.
  _status="$(docker inspect ${_containerName} -f '{{json .State.Running}}' 2>&1)";

  if [[ "${_status}" == "true" ]]; then
      _rescode=${TRUE};
  else
    export RESULT="${_status}";
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Copies a file to a Docker container.
## -> 1: The file to copy.
## -> 2: The container name.
## -> 3: The target location.
## <- 0/${TRUE} if the operation succeeds; 1/${FALSE} otherwise.
## Example:
##   if copyToDockerContainer "my-file" "container" "/tmp"; then
##     echo "my-file copied to container:/tmp successfully";
##   fi
function copyToDockerContainer() {
  local _file="${1}";
  local _containerName="${2}";
  local _targetLocation="${3}";
  local -i _rescode;
  local _output;

  checkNotEmpty "file" "${_file}" 1;
  checkNotEmpty "containerName" "${_containerName}" 2;
  checkNotEmpty "targetLocation" "${_targetLocation}" 3;

  _output="$(docker cp "${_file}" "${_containerName}":"${_targetLocation}")";
  _rescode=$?;

  if isFalse ${_rescode}; then
      export RESULT="${_output}";
  fi

  return ${_rescode};
}

## Runs a Docker command.
## -> @: The docker command.
## <- 0/${TRUE} if the operation succeeds; 1/${FALSE} otherwise.
## Example:
##   if dockerCommand create -v /config --name config busybox; then
##     echo "config container created successfully";
##   fi
function dockerCommand() {
  local _args="${@}";
  local -i _rescode;
  local _output;

  _output="$(docker ${_args} 2>&1)"
  _rescode=$?;
  if isFalse ${_rescode}; then
      export RESULT="${_output}";
  fi

  return ${_rescode};
}

## Checks if given network exists.
## -> 1: The network name.
## <- 0/${TRUE} if the networkctl exists; 0/${FALSE} otherwise.
## Example:
##   if dockerNetworkExists "bridge"; then
##     echo "'bridge' network already exists";
##   fi
function dockerNetworkExists() {
  local _name="${1}";
  local _result;
  local -i _rescode;

  checkNotEmpty "name" "${_name}" 1;

  docker network inspect ${_name} > /dev/null 2>&1;
  _rescode=$?;

  return ${_rescode};
}

## Creates a Docker network.
## <- 0/${TRUE} if the network was created successfully; 1/${FALSE} otherwise.
## Example:
##   if createDockerNetwork bridge; then
##     echo "bridge network created";
##   fi
function createDockerNetwork() {
  local _network="${1}";
  local -i _rescode;
  local _output;

  checkNotEmpty "network" "${_network}" 1;

  if ! dockerNetworkExists ${_network}; then
      if dockerCommand network create ${_network}; then
        _rescode=${TRUE};
      else
        _rescode=${FALSE};
      fi
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## Removes a Docker network.
## <- 0/${TRUE} if the network was deleted successfully; 1/${FALSE} otherwise.
## Example:
##   if removeDockerNetwork bridge; then
##     echo "bridge network removed";
##   fi
function removeDockerNetwork() {
  local _network="${1}";
  local -i _rescode;
  local _output;

  checkNotEmpty "network" "${_network}" 1;

  if dockerNetworkExists ${_network}; then
    if dockerCommand network rm ${_network}; then
      _rescode=${TRUE};
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

## Retrieves a Vault token from given file.
## -> 1: The file.
## <- 0/${TRUE} if the token is retrieved; 1/${FALSE} otherwise.
## <- RESULT: the Vault token.
## Example:
##   if retrieveVaultToken "keys.txt"; then
##     echo "Vault token: ${RESULT}";
##   fi
function retrieveVaultToken() {
  local _file="${1}";
  local -i _rescode;
  local _result;

  checkNotEmpty "file" "${_file}" 1;

  _result="$(grep 'Initial Root Token:' "${_file}" | awk '{print substr($NF, 1, length($NF)-1)}')";

  if isEmpty "${_result}"; then
      _rescode=${FALSE};
      export RESULT=""
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  echo "Retrieving Vault token -> ${RESULT}" >> "${TRACE_FILE}"

  return ${_rescode};
}

## Runs a command inside the Vault container.
## -> @: command to run.
## <- 0/${TRUE} if the command succeeds; 1/${FALSE} otherwise.
## Example:
##   if runVaultCommand vault read; then
##     echo "vault read -> ${RESULT}";
##   fi
function runVaultCommand() {
  local _args="${@}";
  local -i _rescode;
  local _result;

  checkNotEmpty "args" "${_args}" 1;

  echo "docker exec -it ${VAULT_CONTAINER_NAME} $(echo "${_args}" | tr '\n' ' ') 2>&1" >> "${TRACE_FILE}"
  logTrace -n "docker exec -it ${VAULT_CONTAINER_NAME} $(echo "${_args}" | tr '\n' ' ') 2>&1";
  _result="$(docker exec -it ${VAULT_CONTAINER_NAME} $(echo "${_args}"))";
  _rescode=$?;
 if isTrue ${_rescode}; then
      logTraceResult SUCCESS "done";
  else
    logTraceResult FAILURE "failed";
  fi

  export RESULT="${_result}";

  return ${_rescode};
}

## Checks if Vault is running.
## Example:
##   checkVaultRunning;f
function checkVaultRunning() {
  logDebug -n "Checking if ${VAULT_CONTAINER_NAME} is running";
  if isDockerContainerRunning "${VAULT_CONTAINER_NAME}"; then
      logDebugResult SUCCESS "true";
  else
    _output="${RESULT}";
    logDebugResult FAILURE "false";
    exitWithErrorCode ERROR_VAULT_CONTAINER_NOT_RUNNING "${_output}";
  fi
}

## Performs the Vault authorization.
## Example:
##   authorizeInVault;
function authorizeInVault() {

  logDebug -n "Retrieving Vault token";
  if retrieveVaultToken "${KEYS_FILE}"; then
      _vaultToken="${RESULT}";
      logDebugResult SUCCESS "${_vaultToken}";
  else
    logDebugResult FAILURE "failed";
    exitWithErrorCode CANNOT_RETRIEVE_VAULT_TOKEN;
  fi

  checkVaultRunning;

  logDebug -n "Logging-in in Vault";
  if runVaultCommand vault login -address=${VAULT_URL} ${_vaultToken}; then
    logDebugResult SUCCESS "done";
  else
    _output="${RESULT}";
    logDebugResult FAILURE "failed";
    exitWithErrorCode VAULT_LOGIN_ERROR "${_output}";
  fi

  logDebug -n "Requesting authorization in Vault";
  if runVaultCommand vault auth -address=${VAULT_URL} ${_vaultToken}; then
      logDebugResult SUCCESS "done";
  else
    _output="${RESULT}";
    logDebugResult FAILURE "failed";
    exitWithErrorCode VAULT_AUTHORIZATION_ERROR "${_output}";
  fi
}

## Builds the Vault url.
## <- 0/${TRUE} if the Vault url was built; 1/${FALSE} otherwise.
## <- RESULT: The Vault url.
## Example:
##   if retrieveVaultUrl; then
##     echo "Vault URL -> ${RESULT}";
##   fi
function retrieveVaultUrl() {
  local _protocol="${VAULT_URL_PROTOCOL}";
  local _port="${VAULT_URL_PORT}";
  local _virtualHost="${VAULT_VIRTUAL_HOST}";
  local _portAux="";
  local -i _rescode;

  if ([[ "${_protocol}" == "https" ]] && [[ "${_port}" == "443" ]]) || ([[ "${_protocol}" == "http" ]] && [[ "${_port}" == "80" ]]); then
    _portAux="";
  else
    _portAux=":${_port}";
  fi

  export RESULT="${_protocol}://${_virtualHost}${_portAux}";
  _rescode=${TRUE};

  return ${_rescode};
}

## Writes a file in Vault.
## -> 1: The source path.
## -> 2: The destination path.
## <- 0/${TRUE} if the private key was stored; 1/${FALSE} otherwise.
## Example:
##   if writeFileInVault "config/concourse-private-key" "concourse/main/main/private-key"; then
##     echo "Private key written in Vault";
##   else
##     echo "Could not write the private key in Vault: ${RESULT}";
##   fi
function writeFileInVault() {
  local _sourcePath="${1}";
  local _destinationPath="${2}";
  local -i _rescode;

  checkNotEmpty "sourcePath" "${_sourcePath}" 1;
  checkNotEmpty "destinationPath" "${_destinationPath}" 2;

  if runVaultCommand vault write -address="${VAULT_URL}" "${_destinationPath}" "value=@${_sourcePath}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Writes a setting in Vault.
## -> 1: The destination.
## -> 2: The value.
## <- 0/${TRUE} if the private key was stored; 1/${FALSE} otherwise.
## Example:
##   if writeInVault "config/registry-username" "johndoe"; then
##     echo "Registry username written in Vault";
##   else
##     echo "Could not write the registry username in Vault: ${RESULT}";
##   fi
function writeValueInVault() {
  local _destinationPath="${1}";
  local _value="${2}";
  local -i _rescode;

  checkNotEmpty "destinationPath" "${_destinationPath}" 1;
  checkNotEmpty "value" "${_value}" 2;

  if runVaultCommand vault write -address="${VAULT_URL}" "${_destinationPath}" "value=${_value}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Builds the path of a pipeline parameter in Vault.
## -> 1: The Concourse folder.
## -> 2: The Concourse team.
## -> 3: The pipeline name.
## -> 4: The parameter name.
## <- 0/${TRUE} if the path was constructed successfully; 1/${FALSE} otherwise.
## <- RESULT: The path, if the operation succeeds.
## Example:
##   if buildPipelineParameterPathInVault "/concourse" "main" "default" "src-git-branch"; then
##     echo "src-git-branch in Vault under: ${RESULT}";
##   fi
function buildPipelineParameterPathInVault() {
  local _concourseFolder="${1}";
  local _concourseTeam="${2}";
  local _pipelineName="${3}";
  local _parameter="${4}";
  local -i _rescode;

  checkNotEmpty "concourseFolder" "${_concourseFolder}" 1;
  checkNotEmpty "concourseTeam" "${_concourseTeam}" 2;
  checkNotEmpty "pipelineName" "${_pipelineName}" 3;
  checkNotEmpty "parameter" "${_parameter}" 4;

  export RESULT="${_concourseFolder#/}/${_concourseTeam}/${_pipelineName}/${_parameter}";
  _rescode=${TRUE};

  return ${_rescode};
}

## Generates the vault.hcl file.
## -> 1: The vault.hcl file.
## -> 2: The lease TTL.
## -> 3: The maximum lease TTL.
## -> 4: The vault ip. Optional. Defaults to 0.0.0.0.
## <- 0/${TRUE} if the file gets generated successfully; 1/${FALSE} otherwise.
## Example:
##   if generateVaultHclFile "./vault.hcl" "168h" "720h"; then
##     echo "vault.hcl file generated successfully";
##   fi
function generateVaultHclFile() {
  local _file="${1}";
  local _leaseTtl="${2}";
  local _maxLeaseTtl="${3}";
  local _vaultIp="${4:-0.0.0.0}";
  local -i _rescode;
  local _output;

  checkNotEmpty "file" "${_file}" 1;
  checkNotEmpty "leaseTTL" "${_leaseTtl}" 2;
  checkNotEmuty "maxLeaseTTL" "${_maxLeaseTtl}" 3;

  if fileExists "${_file}"; then
    logDebug -n "Removing previous ${_file}";
    rm -f "${_file}";
    _rescode=${TRUE};
    if isTrue ${_rescode}; then
      logDebugResult SUCCESS "done";
    else
      logDebugResult FAILURE "failed";
      exitWithErrorCode CANNOT_DELETE_PREVIOUS_VAULT_HCL;
    fi
  fi

  logDebug -n "Checking if we can create ${_file}";
  touch "${_file}";
  _rescode=${TRUE};
  if isTrue ${_rescode}; then
      logDebugResult SUCCESS "done";
  else
    logDebugResult FAILURE "failed";
    exitWithErrorCode CANNOT_CREATE_VAULT_HCL;
  fi

  logDebug -n "Creating ${_file}";
  # ${VAULT_URL##*://}
  cat <<EOF > "${_file}"
backend "file" {
  path = "/vault/file"
}
listener "tcp" {
  address = "${_vaultIp}:8200"
  tls_disable = 1
}
default_lease_ttl = "${_leaseTtl}"
max_lease_ttl = "${_maxLeaseTtl}"
EOF
  _rescode=$?
  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done";
    _rescode=${TRUE};
  else
    logDebugResult FAILURE "failed";
  fi

  return ${_rescode};
}

## Creates the Vault container if it does not exist, or starts the already existing Vault container.
## -> 1: The virtual host.
## -> 2: The network.
## <- 0/${TRUE} if the container was missing and could be created, or if it was started; 1/${FALSE} otherwise.
## Example:
##   if createOrStartVaultContainer "vault.example.com" "my_network"; then
##     echo "vault.example.com started in my_network";
##   fi
function createOrStartVaultContainer() {
  local _vaultContainerName="${1}";
  local _vaultVersion="${2}"
  local _virtualHost="${3}";
  local _vaultPort="${4}";
  local _network="${5}";
  local _configContainerName="${6}";
  local _vaultHclFile="${7}";
  local 
  local -i _rescode;
  local _output;

  checkNotEmpty "vaultContainerName" "${_vaultContainerName}" 1;
  checkNotEmpty "vaultVersion" "${_vaultVersion}" 2;
  checkNotEmpty "virtualHost" "${_virtualHost}" 3;
  checkNotEmpty "vaultPort" "${_vaultPort}" 4;
  checkNotEmpty "network" "${_network}" 5;
  checkNotEmpty "configContainerName" "${_configContainerName}" 6;
  checkNotEmpty "vaultHclFile" "${_vaultHclFile}" 7;

  logDebug -n "Checking if ${_vaultContainerName} container already exists";
  if dockerContainerExists ${_vaultContainerName}; then
      _output="${RESULT}";
      logDebugResult SUCCESS "true";

      logDebug -n "Checking if ${_vaultContainerName} container is already running";
      if isDockerContainerRunning ${_vaultContainerName}; then
          _output="${RESULT}";
          logDebugResult SUCCESS "true";
          _rescode=${TRUE};
      else
        _output="${RESULT}";
        logDebugResult FAILURE "${_output}";

        logDebug -n "Starting existing Vault container";
        if dockerCommand start ${_vaultContainerName}; then
            _output="${RESULT}";
            logDebugResult SUCCESS "done";
            export RESULT="${_output}";
            _rescode=${TRUE};
        else
          _output="${RESULT}";
          logDebugResult FAILURE "failed";
          export RESULT="${_output}";
          _rescode=${FALSE};
        fi
      fi
  else
    _output="${RESULT}";
    logDebugResult SUCCESS "false";

    logDebug -n "Running a new Vault container";
    echo "docker run -d --name ${_vaultContainerName} -p ${_vaultPort}:8200 -e VAULT_CLI_NO_COLOR=true -e VIRTUAL_HOST=${_virtualHost} --add-host "${_virtualHost}:127.0.0.1"  --volumes-from ${_configContainerName} --cap-add=IPC_LOCK vault:${_vaultversion} server -config ${_vaultHclFile}" >> "${TRACE_FILE}"
    if dockerCommand run -d --name ${_vaultContainerName} --hostname ${_vaultContainerName} --add-host "${_virtualHost}:127.0.0.1" -p ${_vaultPort}:8200 -e VAULT_CLI_NO_COLOR=true -e VIRTUAL_HOST=${_virtualHost} --volumes-from ${_configContainerName} --network=${_network} --cap-add=IPC_LOCK vault:${_vaultVersion} server -config ${_vaultHclFile}; then
      logDebugResult SUCCESS "done";
      _rescode=${TRUE};
    else
      _output="${RESULT}";
      logDebugResult FAILURE "failed";
      export RESULT="${_output}";
      _rescode=${FALSE};
    fi
  fi

  return ${_rescode};
}

## Deletes the Vault container if it exists.
## -> 1: The name of the Vault container.
## <- 0/${TRUE} if the container was running and could be deleted, or if it didn't exist; 1/${FALSE} otherwise.
## Example:
##   if deleteVaultContainer; then
##     echo "Vault container deleted";
##   fi
function deleteVaultContainer() {
  local _vaultContainerName="${1}";
  local -i _rescode;
  local _output;

  checkNotEmpty "vaultContainerName" "${_vaultContainerName}" 1;

  logDebug -n "Checking if ${_vaultContainerName} container already exists";
  if dockerContainerExists ${_vaultContainerName}; then
      _output="${RESULT}";
      logDebugResult SUCCESS "${_output}";

      logDebug -n "Deleting existing Vault container";
      if dockerCommand rm -fv ${_vaultContainerName}; then
        logDebugResult SUCCESS "done";
        _rescode=${TRUE};
      else
        _output="${RESULT}";
        logDebugResult FAILURE "failed";
        export RESULT="${_output}";
        _rescode=${FALSE};
      fi
  else
    _output="${RESULT}";
    logDebugResult SUCCESS "false";
  fi

  return ${_rescode};
}
#
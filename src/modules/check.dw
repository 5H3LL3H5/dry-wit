import stdlib;
import error;
import dw-plumbing;

## Performs a precondition check on given parameter to ensure it's not empty. Exits if the check fails.
## -> 1: The parameter name.
## -> 2: The parameter value.
## -> 3: The parameter index.
## Example:
##   checkNotEmpty "user" "${user}" 1 # -> throws an error if the first (1) parameter ("user") is empty.
function checkNotEmpty() {
  local _name="${1}";
  local _value="${2}";
  local _index="${3}";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi
}

## Performs a precondition check on given parameter to ensure it's included in a predefined list.
## Exits if the check fails.
## -> 1: The parameter name.
## -> 2: The parameter value.
## -> 3: The list of allowed values.
## -> 3: The parameter index.
## Example:
##   checkOneOf "option" "${option}" "VALID INVALID" 1 # -> throws an error if the first (1) parameter ("option") is neither VALID nor INVALID.
function checkOneOf() {
  local _name="${1}";
  local _value="${2}";
  local _validValues="${3}";
  local _index="${4}";
  local _validValue;
  local _oldIFS="${IFS}";
  local _valid=${FALSE};
  local _message="";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (${_value}) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_validValues}"; then
    exitWithError UNACCEPTABLE_API_CALL "'validValues' (${_validValues}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (4) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  IFS=$' \t\n';

  for _validValue in ${_validValues}; do
    if areEqual "${_value}" "${_validValue}"; then
      _valid=${TRUE};
    fi
    if isNotEmpty "${_message}"; then
      _message="${_message}, ";
    fi
    _message="${_message}${_validValue}";
  done
  IFS="${_oldIFS}";

  if isFalse ${_valid}; then
    exitWithErrorCode UNACCEPTABLE_API_CALL "'${_name}' (${_value}) is not valid when calling ${FUNCNAME[1]}. It must be one of (${_message}). Review ${FUNCNAME[2]}";
  fi
}

## Checks whether a function is present. Exits if the check fails.
## -> 1: The parameter name.
## -> 2: The function name.
## -> 3: The parameter index.
## Example:
##   checkFunctionPresent "callback" "echo" 1;
function checkFunctionPresent() {
  local _name="${1}";
  local _functionName="${2}";
  local _index="${3}";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_functionName}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi

  if isFunctionMissing "${_functionName}"; then
    exitWithError UNACCEPTABLE_API_CALL "${_name} (parameter at position ${_index}) is a non-existent function when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi
}
#

# mod: docker
# api: dry-wit
# txt: Docker-related functions.

# fun: connectDockerContainerToNetwork container network
# api: dry-wit
# txt: Connects a container to given network.
# opt: container: The Docker container.
# opt: network: The network.
# txt: Returns 0/TRUE if the container was connected to the network; 1/FALSE otherwise.
# txt: The variable RESULT contains the output of the command, either in case of success or failure.
# use: if connectDockerContainerToNetwork container my_network; then echo "Container added to my_network network"; fi
function connectDockerContainerToNetwork() {
  local _container="${1}";
  local _network="${2}";
  local -i _rescode;
  local _output;

  checkNotEmpty "container" "${_container}" 1;
  checkNotEmpty "network" "${_network}" 2;

  logDebug -n "Checking if ${_container} container already exists";
  if dockerContainerExists ${_container}; then
      _output="${RESULT}";
      logDebugResult SUCCESS "true";

      logDebug -n "Connecting ${_container} to ${_network} network";
      echo "docker network connect ${_network} ${_container}" >> ${TRACE_FILE};
      if dockerCommand network connect ${_network} ${_container}; then
        _output="${RESULT}";
        logDebugResult SUCCESS "done";
        export RESULT="${_output}";
        _rescode=${TRUE};
      else
        _output="${RESULT}";
        logDebugResult FAILURE "failed";
        export RESULT="${_output}";
        _rescode=${FALSE};
      fi
  else
    _output="${RESULT}";
    logDebugResult FAILURE "false";
  fi

  return ${_rescode};
}

# fun: copyToDockerContainer file container containerFolder
# api: dry-wit
# txt: Copies a file to a Docker container.
# opt: file: The file to copy.
# opt: container: The container name.
# opt: containerFolder: The target location.
# txt: Returns 0/TRUE if the operation succeeds; 1/FALSE otherwise.
# use: if copyToDockerContainer "my-file" "container" "/tmp"; then echo "my-file copied to container:/tmp successfully"; fi
function copyToDockerContainer() {
    local _file="${1}";
    local _containerName="${2}";
    local _targetLocation="${3}";
    local -i _rescode;
    local _output;

    checkNotEmpty "file" "${_file}" 1;
    checkNotEmpty "containerName" "${_containerName}" 2;
    checkNotEmpty "targetLocation" "${_targetLocation}" 3;

    _output="$(docker cp "${_file}" "${_containerName}":"${_targetLocation}")";
    _rescode=$?;

    if isFalse ${_rescode}; then
        export RESULT="${_output}";
    fi

    return ${_rescode};
}

# fun: createDockerNetwork network
# api: dry-wit
# txt: Creates a Docker network.
# opt: network: The network name.
# txt: Returns 0/TRUE if the network was created successfully; 1/FALSE otherwise.
# use: if createDockerNetwork bridge; then echo "bridge network created"; fi
function createDockerNetwork() {
    local _network="${1}";
    local -i _rescode;
    local _output;

    checkNotEmpty "network" "${_network}" 1;

    if ! dockerNetworkExists ${_network}; then
        if dockerCommand network create ${_network}; then
            _rescode=${TRUE};
        else
            _rescode=${FALSE};
        fi
    else
        _rescode=${TRUE};
    fi

    return ${_rescode};
}

# fun: dockerCommand command args*
# api: dry-wit
# txt: Runs a Docker command.
# opt: command: The Docker command.
# opt: args: The command arguments (if any).
# txt: Returns 0/TRUE if the operation succeeds; 1/FALSE otherwise.
# use: if dockerCommand create -v /config --name config busybox; then echo "config container created successfully"; fi
function dockerCommand() {
    local _args="${@}";
    local -i _rescode;
    local _output;

    _output="$(docker ${_args} 2>&1)"
    _rescode=$?;
    if isFalse ${_rescode}; then
        export RESULT="${_output}";
    fi

    return ${_rescode};
}

# fun: dockerContainerExists container
# api: dry-wit
# txt: Checks if given container exists.
# opt: container: The container name.
# txt: Returns 0/TRUE if the container exists; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash of the container.
# use: if dockerContainerExists "config"; then echo "'config' container already exists (${RESULT})"; fi
function dockerContainerExists() {
    local _name="${1}";
    local _result;
    local -i _rescode;

    checkNotEmpty "name" "${_name}" 1;

    _result="$(docker ps -a --no-trunc --filter name=^/${_name}$ -q)";
    if isEmpty "${_result}"; then
        _rescode=${FALSE};
    else
        _rescode=${TRUE};
        export RESULT="${_result}";
    fi

    return ${_rescode};
}

# fun: dockerNetworkExists network
# api: dry-wit
# txt: Checks if given network exists.
# opt: network: The network name.
# txt: Returns 0/TRUE if the network exists; 0/${FALSE} otherwise.
# use: if dockerNetworkExists "bridge"; then echo "'bridge' network already exists"; fi
function dockerNetworkExists() {
    local _name="${1}";
    local _result;
    local -i _rescode;

    checkNotEmpty "name" "${_name}" 1;

    docker network inspect ${_name} > /dev/null 2>&1;
    _rescode=$?;

    return ${_rescode};
}

# fun: isDockerContainerRunning container
# api: dry-wit
# txt: Checks if a container is running.
# opt: fun: the container name.
# txt: Returns 0/TRUE if the container is running; 1/FALSE otherwise.
# use: if isDockerContainerRunning mysql; then echo "mysql is running"; fi
function isDockerContainerRunning() {
    local _containerName="${1}";
    local _status;
    local -i _rescode;

    checkNotEmpty "containerName" "${_containerName}" 1;

    ## Note: docker is a requirement of the caller script, not dry-wit.
    _status="$(docker inspect ${_containerName} -f '{{json .State.Running}}' 2>&1)";

    if [[ "${_status}" == "true" ]]; then
        _rescode=${TRUE};
    else
        export RESULT="${_status}";
        _rescode=${FALSE};
    fi

    return ${_rescode};
}

# fun: removeDockerNetwork network
# api: dry-wit
# txt: Removes a Docker network.
# opt: network: The Docker network.
# txt: Returns 0/TRUE if the network was deleted successfully; 1/FALSE otherwise.
# use: if removeDockerNetwork bridge; then echo "bridge network removed"; fi
function removeDockerNetwork() {
  local _network="${1}";
  local -i _rescode;
  local _output;

  checkNotEmpty "network" "${_network}" 1;

  if dockerNetworkExists ${_network}; then
    if dockerCommand network rm ${_network}; then
      _rescode=${TRUE};
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: retrieveDockerContainerStatus container
# api: dry-wit
# txt: Retrieves the status of given container.
# opt: container: The container name.
# txt: Returns 0/TRUE if the container status could be obtained; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the status.
# use: if retrieveDockerContainerStatus mysql; then echo "mysql's status is ${RESULT}"; fi
function retrieveDockerContainerStatus() {
    local _containerName="${1}";
    local _result;
    local -i _rescode;

    checkNotEmpty "containerName" "${_containerName}" 1;

    ## Note: docker is a requirement of the caller script, not dry-wit.
    _result="$(docker inspect ${_containerName} -f {{json .State.Status}})";
    _rescode=$?;

    export RESULT="${_result}";

    return ${_rescode};
}
#

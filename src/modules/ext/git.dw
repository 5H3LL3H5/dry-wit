# mod: git
# api: public
# txt: git-related functions

# fun: retrieveBranch
# api: public
# txt: Finds out the current branch.
# txt: Returns 0/TRUE if the branch could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the name of the branch.
# use: if retrieveBranch; then echo "The current branch is ${RESULT}"; fi
function retrieveBranch() {
  local -i _rescode;
  local _result;

  _result="$(git rev-parse --abbrev-ref HEAD)";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveRepositoryUrl
# api: public
# txt: Finds out the URL of the git repository.
# txt: Returns 0/TRUE if the url could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the repository url.
# use: if findOutRepositoryUrl; then echo "The repository url is ${RESULT}"; fi
function retrieveRepositoryUrl() {
  local -i _rescode;
  local _result;

  _result="$(git config --get remote.origin.url)";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveHeadRevision repositoryFolder
# api: public
# txt: Retrieves the latest revision of the git repository.
# opt: repositoryFolder: The repository folder;
# txt: Returns 0/TRUE if the revision could be retrieved; 1/FALSE otherwise.
# use: if retrieveHeadRevision; then echo "Revision: ${RESULT}"; fi
function retrieveHeadRevision() {
  local _folder="${1}";
  checkNotEmpty repositoryFolder "${_folder}" 1;

  local _rescode=${FALSE};
  local _result;

  pushd "${_folder}" > /dev/null 2>&1;
  _rescode=$?;

  if isTrue ${_rescode}; then
    _result="$(git rev-parse HEAD)";
    _rescode=$?;
    popd > /dev/null 2>&1;
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveRemoteHead repo branch
# api: public
# txt: Retrieves the hash of the HEAD of a certain remote branch in given local repository.
# opt: repo: The repository folder.
# opt: branch: The remote branch.
# txt: Returns 0/TRUE if the folder could be processed; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash.
# use: if retrieveRemoteHead "/tmp/my-Rep" "master"; then echo "Remote HEAD: ${RESULT}"; fi
function retrieveRemoteHead() {
  local _repo="${1}";
  checkNotEmpty repo "${_repo}"  1;
  local _branch="${2}";
  checkNotEmpty branch "${_branch}" 2;

  local _result;
  local -i _rescode;

  pushd "${_repo}" > /dev/null 2>&1;
  _rescode=$?;
  if isTrue ${_rescode}; then
    _result=$(git ls-remote 2> /dev/null | grep "${_branch}" | grep 'refs/remotes' | awk '{print $1;}');
    _rescode=$?;
    popd > /dev/null 2>&1
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveRemoteHeadFromUrl url branch
# api: public
# txt: Retrieves the hash of the HEAD for a certain branch in given remote URL.
# opt: url: The remote URL.
# opt: branch: The remote branch.
# txt: Returns 0/TRUE if the URL could be processed; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash.
# use: if retrieveRemoteHeadFromURL "http://github.com/Ryder/set-square" "master"; then echo "Remote master: ${RESULT}"; fi
function retrieveRemoteHeadFromURL() {
  local _url="${1}";
  checkNotEmpty url "${_url}" 1;
  local _branch="${2}";
  checkNotEmpty branch "${_branch}" 2;

  local _result;
  local -i _rescode;

  _result="$(git ls-remote "${_url}" 2> /dev/null | grep "${_branch}" | head -n 1 | cut -f 1)";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet

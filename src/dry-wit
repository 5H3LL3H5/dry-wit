#!/bin/bash
# (c) 2008-today Automated Computing Machinery, S.L.
#
#    This file is part of dry-wit.
#
#    dry-wit is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    dry-wit is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with dry-wit.  If not, see <http://www.gnu.org/licenses/>.

#set -o errexit  # terminate on any unhandled error
#set -o nounset  # terminate on any unset variable
set -o pipefail # In a pipe, the exit status of the last command that threw a non-zero exit code is returned.
#set -o xtrace   # trace what gets executed

export TRUE=0;
export FALSE=1;

if [ "$1" != "" ]; then
  export SCRIPT_NAME="$(basename $1)";
else
  export SCRIPT_NAME="$0";
fi

declare -a __DRYWIT_BOOTSTRAP_MODULES=(\
   "stdlib" \
   "string" \
   "array" \
   "check" \
   "envvar" \
   "constant" \
   "error" \
   "envvar" \
   "term" \
   "echo" \
   "color" \
   "logging" \
   "cli" \
   "usage" \
   "dw-plumbing" \
   "file" \
);

declare -a __DRYWIT_IMPORTED_MODULES;

export DRYWIT_MODULE_TAG="master";
export DRYWIT_MODULE_URL="https://raw.githubusercontent.com/rydnr/dry-wit/master/src/${DRYWIT_MODULE_TAG}";
export DRYWIT_MODULE_PATH="${HOME}/.dry-wit/modules"

function downloadModule() {
  local _module="${1}";
  local -i _rescode;
  local _result="";

  mkdir -p "${DRYWIT_MODULE_PATH}";

  echo -n "Downloading ${_module} from ${DRYWIT_MODULE_URL}/${_module}.dw ... ";
  curl -s "${DRYWIT_MODULE_URL}/${_module}.dw" > "${DRYWIT_MODULE_PATH}/${_module}.dw";
  _rescode=$?;
  if [[ ${_rescode} -eq ${TRUE} ]]; then
    echo "done";
    export RESULT="${DRYWIT_MODULE_PATH}/${_module}.dw";
  else
    echo "failed";
  fi

  return ${_rescode};
}

function DRYWIT.bootstrap() {
  local _module;
  local _modulePath;

  for _module in ${__DRYWIT_BOOTSTRAP_MODULES[*]}; do
    if findModule "${_module}"; then
      _modulePath="${RESULT}";
    elif downloadModule "${_module}"; then
      _modulePath="${RESULT}";
    else
      echo "ERROR: Required module ${_module}.dw not found. Please reinstall dry-wit."
      exit 1;
    fi
  done

  source "${_modulePath}";
  __DRYWIT_IMPORTED_MODULES[${#__DRYWIT_IMPORTED_MODULES[@]}]="${_module}";
}

function import() {
  local _module="${1}";

  if findModule "${_module}"; then
    source ${RESULT};
    if arrayDoesNotContain "${__DRYWIT_IMPORTED_MODULES[@]}" "${_module}"; then
      __DRYWIT_IMPORTED_MODULES[${#__DRYWIT_IMPORTED_MODULES}]="${_module}";
    fi
  fi
}

function findModule() {
  local _module="${1}";
  local -i _rescode=${FALSE};
  local _folder;
  local _result="";

  for _folder in ${HOME}/.dry-wit $(dirname $(which dry-wit)) /usr/share/dry-wit; do
    if [[ -e "${_folder}"/"${_module}.dw" ]]; then
      _rescode=${TRUE};
      _result="${_folder}/${_module}.dw";
      break;
    fi
  done

  export RESULT="${_result}";

  return ${_rescode};
}

DRYWIT.bootstrap;

source $@;
DRYWIT.main $@;
cleanup;
#

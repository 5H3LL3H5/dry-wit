#!/bin/bash
# (c) 2008-today Automated Computing Machinery, S.L.
#
#    This file is part of dry-wit.
#
#    dry-wit is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    dry-wit is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with dry-wit.  If not, see <http://www.gnu.org/licenses/>.

#set -o errexit  # terminate on any unhandled error
#set -o nounset  # terminate on any unset variable
set -o pipefail # In a pipe, the exit status of the last command that threw a non-zero exit code is returned.
#set -o xtrace   # trace what gets executed

export TRUE=0;
export FALSE=1;

if [ "$1" != "" ]; then
  export SCRIPT_NAME="$(basename $1)";
else
  export SCRIPT_NAME="$0";
fi

declare -a __DRYWIT_BOOTSTRAP_MODULES=(\
   "stdlib" \
   "string" \
   "color" \
   "array" \
   "check" \
   "envvar" \
   "constant" \
   "error" \
   "term" \
   "echo" \
   "logging" \
   "cli" \
   "usage" \
   "dw-plumbing" \
   "file" \
);

declare -a __DRYWIT_IMPORTED_MODULES;

export DRYWIT_MODULE_TAG="master";
export DRYWIT_MODULE_URL="https://raw.githubusercontent.com/rydnr/dry-wit/${DRYWIT_MODULE_TAG}/src/modules";
export DRYWIT_MODULE_PATH="${HOME}/.dry-wit/modules"

function DRYWIT.failsafeLogTrace() {
  local _message="${1}";

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## checkNotEmpty is loaded.
  type checkNotEmpty 2> /dev/null | grep -q 'function';
  if [[ $? -eq ${TRUE} ]]; then
    checkNotEmpty "module" "${_module}" 1;
  fi

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## logTrace is loaded.
  type logTrace 2> /dev/null | grep -q 'function';
  if [[ $? -eq ${TRUE} ]]; then
    logTrace -n "${_message}";
  fi

}

function DRYWIT.failsafeLogTraceResult() {
  local _outcome="${1}";
  local _outcomeMessage="${2}";

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## checkNotEmpty is loaded.
  type checkNotEmpty 2> /dev/null | grep -q 'function';
  if [[ $? -eq ${TRUE} ]]; then
    checkNotEmpty "outcome" "${_outcome}" 1;
    checkNotEmpty "outcomeMessage" "${_outcomeMessage}" 2;
  fi

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## logTraceResult is loaded.
  type logTraceResult 2> /dev/null | grep -q 'function';
  if [[ $? -eq ${TRUE} ]]; then
    logTraceResult ${_outcome} "${_outcomeMessage}";
  fi
}

function downloadModule() {
  local _module="${1}";
  local -i _rescode;
  local _result="";

  mkdir -p "${DRYWIT_MODULE_PATH}";

  DRYWIT.failsafeLogTrace "Downloading '${_module}' module from ${DRYWIT_MODULE_URL}/${_module}.dw";
  curl -s "${DRYWIT_MODULE_URL}/${_module}.dw" > "${DRYWIT_MODULE_PATH}/${_module}.dw";
  _rescode=$?;
  if [[ ${_rescode} -eq ${TRUE} ]]; then
    DRYWIT.failsafeLogTraceResult SUCCESS "done";
    export RESULT="${DRYWIT_MODULE_PATH}/${_module}.dw";
  else
    DRYWIT.failsafeLogTraceResult FAILURE "failed";
  fi

  return ${_rescode};
}

function DRYWIT.bootstrap() {
  local _module;
  local _modulePath;

  for _module in ${__DRYWIT_BOOTSTRAP_MODULES[*]}; do
    import "${_module}";
  done

}

function import() {
  local _module="${1}";

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## checkNotEmpty is loaded.
  type checkNotEmpty 2> /dev/null | grep -q 'function';
  if [[ $? -eq ${TRUE} ]]; then
    checkNotEmpty "module" "${_module}" 1;
  fi

  if findModule "${_module}"; then
    _modulePath="${RESULT}";
  elif downloadModule "${_module}"; then
    _modulePath="${RESULT}";
  else
    echo "ERROR: Required module ${_module}.dw not found. Is it correctly spelled?"
    exit 1;
  fi

  DRYWIT.failsafeLogTrace "Loading ${_modulePath}";
  source "${_modulePath}";
  DRYWIT.failsafeLogTraceResult SUCCESS "done";
  __DRYWIT_IMPORTED_MODULES[${#__DRYWIT_IMPORTED_MODULES[@]}]="${_module}";
}

function findModule() {
  local _module="${1}";
  local -i _rescode=${FALSE};
  local _folder;
  local _result="";

  if [[ -e "${DRYWIT_MODULE_PATH}/${_module}.dw" ]]; then
    _rescode=${TRUE};
    _result="${DRYWIT_MODULE_PATH}/${_module}.dw";
  fi

  export RESULT="${_result}";

  return ${_rescode};
}

DRYWIT.bootstrap;

source $@;
DRYWIT.main $@;
cleanup;
#

## PUBLIC
## Sources given file, if it exists.
## -> 1: The file to source.
## <- 0/${TRUE} if the file is sourced; 1/${FALSE} otherwise.
## Example:
##   sourceFileIfExists "/tmp/my-env";
function sourceFileIfExists() {
  local _file="${1}";
  local -i rescode=${FALSE};

  checkNotEmpty "file" "${_file}" 1;

  logTrace -n "Reading ${_file}";
  if fileExists "${_file}"; then
    rescode=${TRUE};
    source "${_file}";
    logTraceResult SUCCESS "done";
  else
    logTraceResult SUCCESS "not found";
  fi

  return ${rescode};
}

# Finds a given file within a PATH variable.
# -> 1: The file name to look for.
# <- (stdin) the file path.
function findInPath() {
  local result="";
  local _paths="$(echo \"$PATH:.\" | awk -F":" '{for(i=1;i<=NF;i++) print $i;}')";
  local _path;

  local _oldIFS="${IFS}";
  IFS=$' \t\n';
  for _path in $_paths; do
    if [ -f "${_path}/$1" ]; then
      result="${_path}/$1";
      break;
    fi
  done
  IFS="${_oldIFS}";
  echo ${result};
}

## Retrieves the absolute path of given argument.
## -> 1: The relative path.
## <- RESULT: The absolute path.
function retrieveAbsolutePath() {
  local _relativePath="${1}";
  readLink -f "${_relativePath}";
  return $?;
}

## Checks if the system is a MacOSX.
## <- 0/${TRUE} if the system is MacOSX; 1/${FALSE} otherwise.
## Example:
##   if _isMacOSX; then
##     echo "I'm running on a MacOSX";
##   fi
function isMacOSX() {
  local -i rescode;
  if [ "$(uname -s)" == "Darwin" ]; then
    rescode=${TRUE};
  else
    rescode=${FALSE};
  fi
  return ${rescode};
}

## Runs readlink (differs in Linux and in MacOSX).
## -> @: The readlink parameters.
## <- RESULT: The output of readlink.
## <- the result code of readlink.
## Example:
##   if readLink -f "/bin/bash"; then
##     echo "readlink result: ${RESULT}"
##   fi
function readLink() {
  local -i rescode;
  local result;

  if isMacOSX; then
    result="$(greadlink $@)";
    rescode=$?;
  else
    result="$(readlink $@)";
    rescode=$?;
  fi
  export RESULT="${result}";
  return ${rescode};
}

# Retrieves the disk space available in the filesystem containing
# given folder. Prints the available space in bytes. Returns 0 if
# the space could be calculated.
# - folder: the folder.
function retrieveFreeDiskSpaceUnderFolder() {
  local result;
  local resultCode=1;
  local _folder="$1";
  local _aux="${_folder}";

  if [ -d "${_folder}" ]; then
    while isNotEmpty "${_aux}" -a areNotEqual "${_aux}" "/" && \
          ! mountpoint -q "${_aux}"; do
      _aux="${_aux%/*}";
    done;

    mountpoint -q "${_aux}";
    resultCode=$?;

    if isTrue ${resultCode}; then
      result="$(df | grep " ${_aux}$" | awk '{print $4;}')";
      resultCode=$?;
    fi
  fi

  export RESULT="${result}";

  return ${resultCode};
}


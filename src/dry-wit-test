#!/bin/bash ./dry-wit
# Copyright 2016-today Automated Computing Machinery S.L.
# Distributed under the terms of the GNU General Public License v3

#set -o xtrace

# The tests
export -a TESTS;

# The associative arrays
declare -A TEST_ERRORS; export TEST_ERRORS;
declare -A TEST_ERROR_MESSAGES; export TEST_ERROR_MESSAGES;
declare -A TEST_FAILURES; export TEST_FAILURES;
declare -A TEST_SUCCESSES; export TEST_SUCCESSES;
declare -A TEST_FAILURE_MESSAGES; export TEST_FAILURE_MESSAGES;
declare -A TEST_ASSERTION_FAILURES; export TEST_ASSERTION_FAILURES;
declare -A TEST_ASSERTION_SUCCESSES; export TEST_ASSERTION_SUCCESSES;
declare -A TEST_ASSERTION_LINE_NUMBERS; export TEST_ASSERTION_LINE_NUMBERS;
declare -A TEST_ASSERTION_FAILURE_MESSAGES; export TEST_ASSERTION_FAILURE_MESSAGES;
declare -A TEST_ASSERTION_FAILURE_CONTEXT; export TEST_ASSERTION_FAILURE_CONTEXT;

## Defines the errors.
## dry-wit hook
function _defineErrors() {
  addError TEST_WITH_FAILED_ASSERTIONS "Test with failed assertions";
  addError TEST_WITH_NO_ASSERTIONS "Test with no assertions";
  addError NO_TESTS_FOUND "No tests found";
}

## Retrieves all available tests.
## -> 1: The script name.
## <- RESULT: The space-separated list of tests found.
## Example:
##   retrieveTests "dry-wit";
##   echo "Tests found: ${RESULT}";
function retrieveTests() {
  local _script="${1}";
  local _functions="$(typeset -f | awk '!/^main[ (]/ && /^[^ {}]+ *\(\)/ { gsub(/[()]/, "", $1); print $1}')";

  if isEmpty "${_functions}"; then
    exitWithErrorCode NO_TESTS_FOUND;
  fi

  for _f in ${_functions}; do
    if [ "${_f%*_test}" != "${_f}" ] && [ "${_f}" != "_test" ]; then
      TESTS[${#TESTS[@]}]="${_f}";
    fi
  done

  if isEmpty "${TESTS[@]}"; then
    exitWithErrorCode NO_TESTS_FOUND;
  fi

  export RESULT="${TESTS[@]}";
}

## Annotates a new error when executing a test.
## Note: This function is used by dry-wit itself.
## Example:
##   addTestError "my_test";
function addTestError() {
  local _test="${1}";
  local _message="${2}";
  local -i _count;
  local -i _index;

  checkNotEmpty "test" "${_test}" 1;
  checkNotEmpty "message" "${_message}" 2;

  _count=${TEST_ERRORS[${_test}]};
  if isEmpty "${_count}"; then
      _count=0;
  fi
  _index=${_count};
  _count=$((_count+1));

  TEST_ERRORS["${_test}"]=${_count};
  TEST_ERROR_MESSAGES["${_test}:${_index}"]="${_message}";
}

## PRIVATE
## Removes a detected error for a given test, since it expected in an assertErrorThrown.
## Example:
##   _removeTestError "my_test";
function _removeTestError() {
  local _test="${1}";
  local -i _count;
  local -i _index;

  checkNotEmpty "test" "${_test}" 1;

  _count=${TEST_ERRORS[${_test}]};
  if ! isEmpty "${_count}"; then
      _index=${_count};
      _count=$((_count-1));
      TEST_ERRORS["${_test}"]=${_count};
      TEST_ERROR_MESSAGES["${_test}:${_index}"]="";
  fi
}

## Annotates a new failed test.
## -> 1: The test name.
## -> 2: The message.
## Example:
##   addTestFailure "my_test" "Failed assertions";
function addTestFailure() {
  local _test="${1}";
  local _message="${2}";
  local -i _count;
  local -i _index;

  checkNotEmpty "test" "${_test}" 1;
  checkNotEmpty "message" "${_message}" 2;

  _count=${TEST_FAILURES["${_test}"]};
  if isEmpty "${_count}"; then
      _count=0;
  fi
  _index=${_count};
  _count=$((_count+1));

  TEST_FAILURES["${_test}"]=${_count};
  TEST_FAILURE_MESSAGES["${_test}:${_index}"]="${_message}";
}

## Annotates a new passed test.
## -> 1: The test name.
## Example:
##   addTestSuccess "my_test";
function addTestSuccess() {
  local _test="${1}";
  local _count;

  _count=${TEST_SUCCESSES["${_test}"]};
  if isEmpty "${_count}"; then
    _count=0;
  fi
  _count=$((_count+1));

  TEST_SUCCESSES["${_test}"]=${_count};
}

## Annotates a new failed test assertion.
## -> 1: The test name.
## -> 2: The error message.
## -> 3: Additional context information (optional).
## Example:
##   addTestAssertionFailure "my_test" "Should not fail";
function addTestAssertionFailure() {
  local _test="${1}";
  local _message="${2}";

  checkNotEmpty "test" "${_test}" 1;
  checkNotEmpty "message" "${_message}" 2;

  local _extra="${3}";
  local _lineNumber="${BASH_LINENO[1]}";
  local -i _count;
  local -i _index;

  _count=${TEST_ASSERTION_FAILURES["${_test}"]};
  if isEmpty "${_count}"; then
      _count=0;
  fi
  _index=${_count};
  _count=$((_count+1));

  TEST_ASSERTION_FAILURES["${_test}"]=${_count};
  TEST_ASSERTION_LINE_NUMBERS["${_test}:${_index}"]=${_lineNumber};
  TEST_ASSERTION_FAILURE_MESSAGES["${_test}:${_index}"]="${_message}";
  if isNotEmpty "${_extra}"; then
      TEST_ASSERTION_FAILURE_CONTEXT["${_test}:${_index}"]="${_extra}";
  fi
}

## Annotates a new passed test assertion.
## -> 1: The test name.
## Example:
##   addTestAssertionSuccess "my_test";
function addTestAssertionSuccess() {
  local _test="${1}";
  local _count;

  _count=${TEST_ASSERTION_SUCCESSES["${_test}"]};
  if isEmpty "${_count}"; then
    _count=0;
  fi
  _count=$((_count+1));
  TEST_ASSERTION_SUCCESSES["${_test}"]=${_count};
}

## Retrieves the number of passing assertions for given test.
## -> 1: The test name.
## Example:
##   retrievePassingTestAssertions "my_test";
##   echo "my_test: ${RESULT} assertions passed"
function retrievePassingTestAssertions() {
  local _test="${1}";
  local _result;

  _result=${TEST_ASSERTION_SUCCESSES["${_test}"]};
  if isEmpty "${_result}"; then
    _result=0;
  fi

  export RESULT="${_result}";
}

## Retrieves the number of failed assertions for given test.
## -> 1: The test name.
## Example:
##   retrieveFailedTestAssertions "my_test";
function retrieveFailedTestAssertions() {
  local _test="${1}";
  local _result;

  _result=${TEST_ASSERTION_FAILURES["${_test}"]};
  if isEmpty "${_result}"; then
    _result=0;
  fi

  export RESULT="${_result}";
}

## Checks whether all assertions passed for given test.
## -> 1: The test.
## <- 0/${TRUE} if all assertions passed; 1/${FALSE} otherwise.
## Example:
##   if allAssertionsPassed "my_test"; then
##     echo "Hurray!";
##   fi
function allAssertionsPassed() {
  local _test="${1}";
  local -i _failed;
  local -i _rescode;

  retrieveFailedTestAssertions "${_test}";
  _failed=${RESULT};

  if [ ${_failed} -eq 0 ]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Checks whether all assertions passed for given test.
## -> 1: The test.
## <- 0/${TRUE} if all assertions passed; 1/${FALSE} otherwise.
## Example:
##   if noAssertionsPassed "my_test"; then
##     echo "Too bad!";
##   fi
function noAssertionsPassed() {
  local _test="${1}";
  local -i _passing;
  local -i _rescode;

  retrievePassingTestAssertions "${_test}";
  _passing=${RESULT};

  if [ ${_passing} -eq 0 ]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Checks whether given test defined no assertions.
## -> 1: The test.
## <- 0/${TRUE} if the test includes no assertions; 1/${FALSE} otherwise.
## Example:
##   if noAssertionsDefined "my_test"; then
##     echo "Error: no assertions defined in my_test";
##   fi
function noAssertionsDefined() {
  local _test="${1}";
  local -i _failed;
  local _i _passing;
  local -i _rescode;

  if allAssertionsPassed "${_test}"; then
    if noAssertionsPassed "${_test}"; then
      _rescode=${TRUE};
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Runs given test.
## -> 1: The test to run.
## <- 0/${TRUE} if the test passes; 1/${FALSE} otherwise.
## Example:
##   run_test "my_test"
##   if isTrue $?; then
##     echo "my_test passes";
##   fi
function runTest() {
  local _test="${1}";
  local _assertions;
  local _rescode;

#  ${_test} > /dev/null 2>&1;
  ${_test}
  if isTrue $?; then
    if noAssertionsDefined "${_test}"; then
      addTestFailure "${_test}" TEST_WITH_NO_ASSERTIONS;
      _rescode=${FALSE};
    elif allAssertionsPassed "${_test}"; then
      addTestSuccess "${_test}";
      _rescode=${TRUE};
    else
      addTestFailure "${_test}" TEST_WITH_FAILED_ASSERTIONS;
      _rescode=${FALSE};
    fi
  else
    addTestError "${_test}";
  fi

  return ${_rescode};
}

## Annotates a test success.
## -> 1: The function name.
## Example:
##   annotateTestSuccess "my_test";
function annotateTestSuccess() {
  addTestSuccess "${_test}";
}

## Retrieves tests with issues of some kind.
## <- RESULT: The space-separated names of the tests with some issues.
## Example:
##   retrieveTestsWithIssues;
##   echo "Tests with issues: ${RESULT}";
function retrieveTestsWithIssues() {
  local _result="";
  local _test;
  local _errors;
  local _failures;
  local _successes;
  local _assertionFailures;
  local _assertionSuccesses;

  for _test in ${TESTS[@]}; do
    _errors="${TEST_ERRORS[${_test}]}";
    _failures="${TEST_FAILURES[${_test}]}";
    _assertionFailures="${TEST_ASSERTION_FAILURES[${_test}]}";

    if ! isEmpty "${_errors}" || ! isEmpty "${_failures}" || ! isEmpty "${_assertionFailures}"; then
      _result="${_result} ${_test}";
    fi
  done

  export RESULT="${_result}";
}

### REPORTING

## Logs a summary of the tests.
## Example:
##   logTestSummary;
function logSummary() {
  for _test in ${TESTS[@]}; do
    logTestSummary "${_test}";
  done
}

## Logs the detailed information about why a given test has thrown errors.
## -> 1: the test name.
## Example:
##   logErrorReasons "my_test";
function logErrorReasons() {
  local _test="${1}";
  local _count=${TEST_ERRORS[${_test}]};
  local -i _i=0;
  local _error;
  local _message;
  local _lineNumber;

  if [ ${_count} -gt 0 ]; then
      for _i in $(seq 0 $((_count-1))); do
        _error="${TEST_ERROR_MESSAGES[${_test}:${_i}]}";
        evalConstant "${_error}" "${_error}";
        _message="${RESULT}";
        logInfo -n "${_message}";
        logInfoResult FAILURE "${_test}";
      done
  fi
}

## Logs the detailed information about why a given test has failed.
## -> 1: the test name.
## Example:
##   logFailureReasons "my_test";
function logFailureReasons() {
  local _test="${1}";
  local _count=${TEST_FAILURES[${_test}]};
  local -i _i=0;
  local _error;
  local _message;
  local _lineNumber;

  if [ ${_count} -gt 0 ]; then
      for _i in $(seq 0 $((_count-1))); do
        _error="${TEST_FAILURE_MESSAGES[${_test}:${_i}]}";
        evalConstant "${_error}" "${_error}";
        _message="${RESULT}";
        logInfo -n "${_message}";
        logInfoResult FAILURE "${_test}";
      done
  fi
}

## Logs the failed assertions for given test.
## -> 1: the test name.
## Example:
##   logFailedAssertions "my_test";
function logFailedAssertions() {
  local _test="${1}";
  local _count=${TEST_ASSERTION_FAILURES[${_test}]};
  local -i _i=0;
  local _error;
  local _message;
  local _lineNumber;
  local _context;

  if [ ${_count} -gt 0 ]; then
      for _i in $(seq 0 $((_count-1))); do
        _lineNumber="${TEST_ASSERTION_LINE_NUMBERS[${_test}:${_i}]}";
        _error="${TEST_ASSERTION_FAILURE_MESSAGES[${_test}:${_i}]}";
        evalConstant "${_error}" "${_error}";
        _message="${RESULT}";
        _context="${TEST_ASSERTION_FAILURE_CONTEXT[${_test}:${_i}]}";
        if isEmpty "${_context}"; then
            logInfo -n "${_message}";
        else
          logInfo -n "${_message}: ${_context}";
        fi
        logInfoResult FAILURE "${_test}:${_lineNumber}";
      done
  fi
}

## Logs a summary of given test.
## -> 1: The test name.
## Example:
##   logTestSummary "my_test";
function logTestSummary() {
  local _test="${1}";
  local _errors;
  local _failures;
  local _successes;
  local _assertionFailures;
  local _assertionSuccesses;

  _errors="${TEST_ERRORS[${_test}]}";
  if isEmpty "${_errors}" || [ ${_errors} -eq 0 ]; then
    _failures="${TEST_FAILURES[${_test}]}";
    _assertionFailures="${TEST_ASSERTION_FAILURES[${_test}]}";
    if isEmpty "${_assertionFailures}" || [ ${_assertionFailures} -eq 0 ]; then
        logInfo -n "Test ${_test}: assertions passed";
        _assertionSuccesses="${TEST_ASSERTION_SUCCESSES[${_test}]}";
        if isEmpty "${_assertionSuccesses}"; then
            logInfoResult FAILURE "0";
        else
          logInfoResult SUCCESS "${_assertionSuccesses}";
        fi
    else
      logInfo -n "Test ${_test}: assertions failed";
      logInfoResult FAILURE "${_assertionFailures}";
      logFailedAssertions "${_test}";
      logInfo -n "Test ${_test}: failures";
      logInfoResult FAILURE "${_failures}";
      logFailureReasons "${_test}";
    fi
  else
    logInfo -n "Test ${_test}: errors";
    logInfoResult FAILURE "${_errors}";
    logErrorReasons "${_test}";
  fi
}

## dry-wit hook
function __dwtest() {
  local _tests;
  local _failedTests;
  local _t;

  logInfo -n "Retrieving tests in ${SCRIPT_NAME}";
  retrieveTests ${SCRIPT_NAME};
  _tests="${RESULT}";
  if isEmpty "${_tests}"; then
    logInfoResult FAILURE "0";
    exitWithErrorCode NO_TESTS_FOUND;
  else
    logInfoResult SUCCESS "$(echo "${_tests}" | wc -w)";
  fi

  for _t in ${_tests}; do
    logInfo -n "Running ${_t}";
    if runTest "${_t}"; then
      logInfoResult SUCCESS "pass";
    else
      logInfoResult FAILURE "failed";
    fi
  done

  retrieveTestsWithIssues;
  _failedTests="${RESULT}";
  if isNotEmpty "${_failedTests}"; then
    for _t in ${_failedTests}; do
      logTestSummary "${_t}";
    done
  fi
}

## Calling dry-wit from a well-known place
function _sourceDryWit() {
  source $(which dry-wit);
}

function __dwCallback() {
  _defineDryWitErrorMessages;
  _defineErrors;
  if _functionPresent defineErrors "${SCRIPT_NAME}"; then
      defineErrors;
  else
    export -a ERROR_MESSAGES=();
  fi
}

### ASSERTIONS ###

## Asserts given condition holds true.
## -> 1: the condition to check.
## -> 2: the error message.
## Example:
##   Assert.isTrue [ 1 == 1 ] "check [ 1 == 1 ] failed";
function Assert.isTrue() {
  local _condition=${1};
  local _error="${2}";

  checkNotEmpty "condition" "${_condition}" 1;
  checkNotEmpty "error" "${_error}" 2;

  if isTrue ${_condition}; then
    addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    addTestAssertionFailure "${FUNCNAME[1]}" "${_error}";
  fi
}

## Asserts given condition holds true.
## -> 1: the condition to check.
## -> 2: the error message.
## Example:
##   Assert.isFalse [ 1 != 1 ], "check [ 1 != 1 ] failed";
function Assert.isFalse() {
  local _condition=${1};
  local _error="${2}";

  checkNotEmpty "condition" "${_condition}" 1;
  checkNotEmpty "error" "${_error}" 2;

  Assert.isTrue [! ${_condition} ] ${_error};
}

## Asserts no error has been thrown so far in current test.
## -> 1: The error message.
## Example:
##   [call functionX]
##   Assert.noErrorThrown "functionX has thrown an error";
function Assert.noErrorThrown() {
  local _message="${1}";

  checkNotEmpty "message" "${_message}" 1;

  local _errors=${TEST_ERRORS["${FUNCNAME[1]}"]};
  if isEmpty "${_errors}"; then
    addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    addTestAssertionFailure "${FUNCNAME[1]}" "${_message}";
  fi
}

## Asserts an error has been thrown so far in current test.
## -> 1: The error message.
## Example:
##   [call functionX]
##   Assert.errorThrown "functionX should have thrown an error";
function Assert.errorThrown() {
  local _message="${1}";

  checkNotEmpty "message" "${_message}" 1;

  local _errors=${TEST_ERRORS["${FUNCNAME[1]}"]};
  if isEmpty "${_errors}"; then
      addTestAssertionFailure "${FUNCNAME[1]}" "${1}";
  else
    addTestAssertionSuccess "${FUNCNAME[1]}";
    _removeTestError "${FUNCNAME[1]}";
  fi
}

## Asserts both values are equal.
## -> 1: The expected value.
## -> 2: The actual value.
## -> 3: The error message.
## Example:
##   Assert.areEqual 1 1 "1 does not equal 1";
function Assert.areEqual() {
  local _expected="${1}";
  local _actual="${2}";
  local _message="${3}";

  checkNotEmpty "expected" "${_expected}" 1;
  checkNotEmpty "actual" "${_actual}" 2;
  checkNotEmpty "message" "${_message}" 3;

  if areEqual "${_expected}" "${_actual}"; then
      addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "(${_expected} != ${_actual})";
  fi
}

## Asserts both values are different.
## -> 1: The expected value.
## -> 2: The actual value.
## -> 3: The error message.
## Example:
##   Assert.areNotEqual 1 2 "1 is equal to 2";
function Assert.areNotEqual() {
  local _expected="${1}";
  local _actual="${2}";
  local _message="${3}";

  checkNotEmpty "expected" "${_expected}" 1;
  checkNotEmpty "actual" "${_actual}" 2;
  checkNotEmpty "message" "${_message}" 3;

  if areNotEqual "${_expected}" "${_actual}"; then
      addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "(${_expected} == ${_actual})";
  fi
}

## Asserts given value is empty.
## -> 1: The value.
## -> 2: The error message.
## Example:
##   Assert.isEmpty "${testValue}" "testValue is not empty";
function Assert.isEmpty() {
  local _value="${1}";
  local _message="${2}";

  checkNotEmpty "value" "${_value}" 1;
  checkNotEmpty "message" "${_message}" 2;

  if isEmpty "${_value}"; then
    addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "(${_value} is not empty)";
  fi
}

## Asserts given value is not empty.
## -> 1: The value.
## -> 2: The error message.
## Example:
##   Assert.isNotEmpty "${testValue}" "testValue is empty";
function Assert.isNotEmpty() {
  local _value="${1}";
  local _message="${2}";

  checkNotEmpty "value" "${_value}" 1;
  checkNotEmpty "message" "${_message}" 2;

  if isNotEmpty "${_value}"; then
    addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "(${_value} is empty)";
  fi
}

## Fails the test directly.
## Example:
##   fail "my_test";
function fail() {
  addTestFailure "${FUNCNAME[1]}";
}

## Checks a substring is contained in given text.
## -> 1: The text.
## -> 2: The substring.
## -> 3: The error message.
## Example:
##   Assert.contains "sample text" "sample" "'sample text' does not contain 'sample'";
function Assert.contains() {
  local _text="${1}";
  local _substring="${2}";
  local _errorMessage="${3}";

  checkNotEmpty "text" "${_text}" 1;
  checkNotEmpty "substring" "${_substring}" 2;
  checkNotEmpty "errorMessage" "${_errorMessage}" 3;

  if contains "${_text}" "${_substring}"; then
      addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_text}' does not contain '${_actual}')";
  fi
}

function main() {
  __dwtest;
}

_sourceDryWit $*;


